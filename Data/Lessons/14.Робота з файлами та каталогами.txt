InputStream використовується для зчитування даних із джерела, OutputStream служить для запису даних за місцем призначення.
У цьому уроці ми маємо розглянути два важливі потоки: FileInputStream і FileOutputStream.

		~Потік FileInputStream - читання з файлу
Потік FileInputStream - це потік, який використовується в Java для читання даних із файлу. Об'єкти можуть бути створені з використанням ключового слова new, доступні кілька типів конструкторів.

Представлений конструктор використовує ім'я файлу як поток з метою створення об'єкта вхідного потоку для зчитування файлу:

InputStream a = new FileInputStream("D:/myprogramm/java/test");

Нижче представлений конструктор використовує об'єктний файл з метою створення об'єкта вхідного потоку для читання файлу. Спершу ми створюємо об'єктний файл при використанні методу File() таким чином:

File a = new File("D:/myprogramm/java/test");
InputStream a = new FileInputStream(a);

Тепер, отримавши об'єкт InputStream, слід ознайомитися з наступним переліком допоміжних методів, які можна використовувати зчитування потоку чи виконання інших операцій у потоці.


№	Метод та опис
1	public void close() throws IOException{}
	Даний метод Java закриває вихідний файловий потік. Звільняє системні ресурси, пов'язані з файлом. Видає IOException.
2	protected void finalize()throws IOException {}
	Цей метод виконує очищення з'єднання з файлом. Дозволяє переконатися у виклику закритого методу даного вихідного файлового потоку за відсутності будь-яких посилань на цей потік. Видає IOException.
3	public int read(int r)throws IOException{}
	Даний метод здійснює Java зчитування заданих байтів даних з InputStream. Повернення даних типу int. Повернення наступного байта даних, в кінці файлу буде здійснено повернення до -1.
4	public int read(byte[] r) throws IOException {}
	Даний метод зчитує байтів r.length з вхідного потоку в масив. Повернення загальної кількості лічених байтів. Наприкінці файлу буде здійснено повернення до -1.
5	public int available() throws IOException{}
	Видає кількість байтів, які можуть бути зчитані з вхідного файлового потоку. Повернення даних типу int.


		~Потік FileOutputStream – створення та запис файлу
Потік FileOutputStream – це потік, який використовується в Java для створення файлу та наступного запису до нього. Потік створить файл у разі його відсутності перед відкриттям для виведення.
Далі представлені два конструктори, які можуть бути задіяні під час створення об'єкта FileOutputStream.
Представлений конструктор використовує ім'я файлу як рядок з метою створення об'єкта вхідного потоку для запису файлу Java:

OutputStream a = new FileOutputStream("D:/myprogramm/java/test") 

Нижче представлений конструктор використовує об'єктний файл з метою створення об'єкта вихідного потоку для запису файлу. Спершу ми створюємо об'єктний файл при використанні методу File() таким чином:

File a = new File("D:/myprogramm/java/test");
OutputStream a = new FileOutputStream(a);

Тепер, отримавши об'єкт OutputStream, слід ознайомитися з наступним переліком допоміжних методів, які можна використовуватиме записи потоку чи виконання інших операцій у потоці.

№	Метод та опис
1	public void close() throws IOException{}
	Даний метод Java закриває вихідний файловий потік. Звільняє системні ресурси, пов'язані з файлом. Видає IOException.
2	protected void finalize()throws IOException {}
	Цей метод виконує очищення з'єднання з файлом. Дозволяє переконатися у виклику закритого методу даного вихідного файлового потоку за відсутності будь-яких посилань на цей потік. Видає IOException.
3	public void write(int w)throws IOException{}
	Даний метод здійснює запис заданого байта у вихідний потік.
4	public void write(byte[] w)
	Запис байтів w.length із зазначеного масиву байтів в OutputStream.


	Приклад
У наступному прикладі представлені InputStream та OutputStream – потоки для читання, створення та запису файлу:

import java.io.*;
public class File {

   public static void main(String args[]) {
   
      try {
         char c[] = {'a','b','c'};
         OutputStream output = new FileOutputStream("file.txt"); // Создание текстового файла
         for(int i = 0; i < c.length; i++) {
            output.write(c[i]); // Запись каждого символа в текстовый файл
         }
         output.close();
     
         InputStream input = new FileInputStream("file.txt");
         int size = input.available();

         for(int j = 0; j < size; j++) {
            System.out.print((char)input.read() + " "); // Чтение текстового файла посимвольно
         }
         input.close();
      }catch(IOException e) {
         System.out.print("Exception");
      }	
   }
}

Представлений вище java код створить файл file.txt і пропише задані символи у форматі char. Те саме виводитиметься на екран стандартного виведення.


		~Каталоги в Java
Java каталог містить файл, який може містити список інших файлів і каталогів. Використовуючи об'єкт File, можна створити каталог, прокрутити список файлів, представлених у каталозі. Для отримання більш детальних відомостей ознайомтеся з переліком усіх методів, які можуть бути викликані з об'єкта File, будучи пов'язаними з каталогами.

		~Створення каталогів
Існують два службові методи File, які можуть бути використані для створення каталогів:

Метод mkdir() дозволяє створити папку Java, повертаючи значення true при успіху операції, і false у разі збою. Збій свідчить у тому, що шлях зазначений у об'єкті File вже існує, або що каталог може бути створено у зв'язку з тим, що повний шлях ще існує.
Метод mkdirs() створює каталог та всі вищестоящі каталоги.
У наступному прикладі представлено створення папки "/java/proglang/newdir":
	Приклад
import java.io.File;
public class CreateDirectory {

   public static void main(String args[]) {
      String nameDir = "/java/proglang/newdir";
      File a = new File(nameDir);
      
      // Створення на диску папки та всіх вищих каталогів
      a.mkdirs();
   }
}
Скомпілюйте та виконайте наступний код для створення каталогу "/java/proglang/newdir".

Примітка? Java автоматично формує роздільники шляху в UNIX та Windows з урахуванням угод. При використанні косої риси (/) при роботі з Java в системі Windows, проводиться коректна роздільна здатність шляху.


		~Список файлів у папці
Метод list(), представлений об'єктом File, може бути використаний для надання переліку всіх файлів та каталогів, наявних у заданій папці, у такому вигляді:
	Приклад
import java.io.File;
public class ReadDirectory {

   public static void main(String[] args) {
      File pathDir = null;
      String[] pathsFilesAndDir;
  
      try {
         // Створення нового об'єкта file
         pathDir = новий файл ("/NetBeans 8.2/Projects/ReadDirectory/ReadDirectory/"); // Обов'язково має існувати вказаний каталог на диску, інакше програма видасть помилку

         // Масив файлів та папок
         pathsFilesAndDir = pathDir.list();

         for(String path:pathsFilesAndDir) {
            // Виведення списку файлів та каталогів
            System.out.println(path);
         }
      } catch (Exception e) {
         // Якщо сталася помилка
         e.printStackTrace();
      }
   }
}
Внаслідок цього буде отримано наступний результат, заснований на каталогах та файлах, доступних у вашому каталогу /NetBeans 8.2/Projects/ReadDirectory/ReadDirectory/:

build
build.xml
manifest.mf
nbproject
src
ReadDirectory