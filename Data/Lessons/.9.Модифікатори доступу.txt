Модифікатори — ключові слова , які Ви додаєте під час ініціалізації для зміни значень. Мова Java має широкий спектр модифікаторів, основні з них:

•модифікатори доступу;
•модифікатори класу, методу, змінної та потоку, що використовуються не для доступу.

Щоб використовувати модифікатор в Java, потрібно включити його ключове слово визначення класу, методу або змінної. Модифікатор має бути попереду решти оператора, як показано в наступних прикладах:

public class className {
   // ...
}
private boolean myFlag;
static final double weeks = 9.5;
protected static final int BOXWIDTH = 42;
public static void main(String[] arguments) {
   // тіло метода
}

Java надає ряд модифікаторів доступу, щоб встановити рівні доступу для класів, змінних, методів і конструкторів. Існує чотири доступи:

•Видимий в пакеті (за замовчуванням і модифікатор не потрібні).
•Видимий лише для класу (private).
•Видимий для всіх (public).
•Видимий для пакета та всіх підкласів (protected).


		~Модифікатор доступу за промовчанням – без ключового слова
Модифікатор доступу за промовчанням означає, що ми явно не оголошуємо модифікатор доступу в Java для класу, поля, методу і т.д.

Змінна або метод, оголошені без модифікатора контролю доступу, доступні для будь-якого іншого класу в тому ж пакеті. Поля в інтерфейсі явно є public, static, final, а методи в інтерфейсі за умовчанням є public.
	Приклад
Змінні та методи можуть бути оголошені в Java без будь-яких модифікаторів, як показано в наступному прикладі:

String version = "1.5.1";

boolean processOrder() {
   return true;
}


		~Модифікатор доступу: private
Модифікатор private — методи, змінні та конструктори, які оголошені як private в Java, можуть бути доступні тільки в межах самого оголошеного класу.

Модифікатор доступу private є найбільшим рівнем доступу. Клас та інтерфейси не можуть бути приватними.

Змінні, оголошені як private, можуть бути доступні поза класом, якщо методи, що їх отримують відкриті (public), присутні в класі (нижче дивіться приклад і пояснення).

Використання модифікатора private в Java є основним способом приховати дані.
	Приклад
Наступний клас використовує контроль доступу private:

public class Logger {
   private String format;
   public String getFormat() {
      return this.format;
   }
   public void setFormat(String format) {
      this.format = format;
   }
}
Тут змінна format класу Logger є private, так що немає ніякого способу для інших класів, щоб отримати та встановити її значення безпосередньо.

Таким чином, щоб ця змінна була доступна для всього, ми визначили два відкриті (public) методи: getFormat() , який повертає значення format і setFormat(String) , який встановлює її значення.


		~Модифікатор доступу
Модифікатор public - клас, метод, конструктор, інтерфейс і т.д. оголошені як public можуть бути доступні з будь-якого іншого класу. Тому поля, методи, блоки, оголошені всередині public класу можуть бути доступні з будь-якого класу, що належить до "всесвіту" Java.

Проте, якщо до public класу в іншому пакеті ми намагаємося отримати доступ, то public клас доводиться імпортувати.

Завдяки успадкування класів, Java всі публічні (public) методи і змінні класу успадковуються його підкласами.
	Приклад
Наступна функція використовує контроль доступу:

public static void main(String[] arguments) {
   // ...
}
Метод main() має бути публічним (public). В іншому випадку він не може бути викликаний за допомогою java-інтерпретатора, щоб запустити клас.


		~Модифікатор доступу protected
Модифікатор protected — змінні, методи та конструктори, які оголошуються як protected у суперкласі, можуть бути доступні лише для підкласів в іншому пакеті або для будь-якого класу в пакеті protected.

Модифікатор доступу protected Java не може бути застосований до класу і інтерфейсів. Методи та поля можуть бути оголошені як protected, проте методи та поля в інтерфейсі не можуть бути оголошені як protected.

Доступ protected дає підкласу можливість використовувати допоміжний метод або змінну, запобігаючи неспорідненому класу від спроб використовувати їх.

приклад
Наступний батьківський клас використовує контроль доступу protected, щоб його дочірній клас перевизначив метод openSpeaker() :

class AudioPlayer {
   protected boolean openSpeaker(Speaker sp) {
      // деталі реалізації
   }
}

class StreamingAudioPlayer {
   boolean openSpeaker(Speaker sp) {
      // деталі реалізації
   }
}
При цьому, якщо ми визначимо метод openSpeaker() як protected, він не буде доступний з будь-якого іншого класу, крім AudioPlayer. Якщо ми визначимо його як public, він стане доступним всім. Але наш намір полягає в тому, щоб розкрити цей метод тільки підкласу, тому ми використовували модифікатор protected.


		~Правила контролю доступу та наслідування
Наступні правила Java застосовуються для успадкованих методів:

•Методи, оголошені як public у суперкласі, також мають бути public у всіх підкласах.
•Методи, оголошені як protected в суперкласі, повинні бути або protected, або public в підкласах; вони не можуть бути приватними.
•Методи, оголошені як private для всіх не успадковуються, тому немає жодного правила для них.