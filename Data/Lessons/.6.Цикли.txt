Цикл — оператори виконуються послідовно: перший оператор функції виконується першим, потім другий тощо. Цикл використовується у ситуації, коли Вам потрібно виконати блок коду кілька разів.
Мови програмування пропонують різні структури управління, що дозволяють складніші шляхи виконання.
Існують наступні цикли Java для обробки циклічних вимог:
Цикл 		Опис
while 		Повторює оператор або групу операторів, доки задана умова є true. Цикл перевіряє умову до виконання тіла циклу.
for 		Виконує послідовність операторів кілька разів та скорочує код, яким керує змінна циклу.
Покращений for 	Виконує послідовність операторів кілька разів і скорочує код, яким керує змінна циклу.
do...while 	Виконується цикл while, за винятком того, що він перевіряє умови наприкінці тіла циклу.



		~while
Цикл while - багаторазово виконує мету оператора до тих пір, поки ця умова вірна.
	Синтаксис
Синтаксис циклу while в Java:

while(Логическое выражение)
{
   //Операторы
}
Можливо, один оператор або група операторів. В умові може бути будь-яке вираження, true(істинна) або будь-яке не нульове значення.
При виконанні, якщо результат логічного виразу true, дії всередині циклу буде виконуватися. Це продовжуватиметься доти, доки результат виразу істинний.
Коли умова стає хибним, програма передає управління на рядок відразу після циклу.
Ключовим моментом циклу while Java є те, що цикл може жодного разу не виконатися. Коли перевіряється умова і результат є хибним, тіло циклу буде пропущено, і виконається перший рядок після циклу while.
	Приклад
public class Test {

   public static void main(String args[]) {
      int x = 10;

      while( x < 15 ) {
         System.out.print("Значення x: " + x );
         x++;
         System.out.print("\n");
      }
   }
}
Буде отримано наступний результат:

Значення х: 10
Значення х: 11
Значення х: 12
Значення х: 13
Значення х: 14


		~for
Цикл for - має структуру управління повторень, що дозволяє ефективно написати цикл, який повинен виконатися певну кількість разів. Цикл for корисний, коли Ви знаєте, скільки разів завдання має бути повторене.
	Синтаксис
Синтаксис циклу для Java:

for(инициализация; логическое выражение; обновление)
{
   //Операторы
}
Процес управління у циклі:
•Стадія ініціалізації виконується першою, і лише один раз. Цей крок дозволяє оголошувати та ініціалізувати будь-які змінні для керування циклом, і він закінчується крапкою з комою(;).
•Далі логічний вираз. Якщо істинно, то тіло циклу виконується, якщо воно хибне, тіло циклу не буде виконано і контроль переходить до наступного оператора повз цикл.
•Після того, як тіло з циклу for запускається на виконання, контроль переходить назад до оператора оновлення. Він дозволяє оновлювати будь-які змінні для керування циклом, і записується без крапки з комою в кінці.
•Логічне вираження тепер оцінюється знову. Якщо істинно, цикл виконується і процес повторюється. Якщо хибно, цикл for завершується.
	Приклад
Нижче наведено приклад коду циклу for Java:

public class Test {

   public static void main(String args[]) {

      for(int x = 10; x < 15; x = x+1) {
         System.out.print("Значення x: " + x );
         System.out.print("\n");
      }
   }
}
Буде отримано наступний результат:

Значення х: 10
Значення х: 11
Значення х: 12
Значення х: 13
Значення х: 14



		~Покращений цикл for
Покращений цикл for — переважно використовується для обходу колекцією елементів, включаючи масиви. Був введений з Java 5.
	Синтаксис
Синтаксис покращеного циклу for:

for(объявление : выражение)
{
   //Операторы
}
Оголошення: до нового оголошеного блоку змінної здійснюється доступ, який має тип, сумісний з елементами масиву.
Вираз: обчислює необхідне Вам у масиві циклу. Вираз може бути змінним або методом масиву, виклик якого повертає масив.
	Приклад
public class Test {

   public static void main(String args[]){
      int [] numbers = {10, 20, 30, 40, 50};

      for(int x : numbers ){
         System.out.print( x );
         System.out.print(",");
      }
      System.out.print("\n");
      String [] names ={"Олег", "Иван", "Дима", "Юля"};
      for( String name : names ) {
         System.out.print( name );
         System.out.print(",");
      }
   }
}
Буде отримано наступний результат:

10,20,30,40,50,
Олег,Иван,Дима,Юля,



		~do...while
Цикл do...while — схожий на цикл while , відмінність, що цикл do...while гарантовано виконається принаймні один раз.
	Синтаксис
Синтаксис циклу do...while в Java:

do
{
   //Операторы
} while(логическое выражение);
Зверніть увагу, що логічний вираз з'являється в кінці циклу, тому оператори в циклі виконуються один раз, перш ніж пройдуть перевірку на логічну умову.
Якщо логічний вираз є істинним, контроль переходить назад, щоб виконати оператори, і вони в циклі виконуються знову. Цей процес повторюється до того часу, поки логічний вираз стане хибним.
	Приклад
Нижче наведено приклад коду циклу do...while:

public class Test {

   public static void main(String args[]){
      int x = 10;

      do{
         System.out.print("Значення х: " + x );
         x++;
         System.out.print("\n");
      } while( x < 15 );
   }
}
Буде отримано наступний результат коду:

Значення х: 10
Значення х: 11
Значення х: 12
Значення х: 13
Значення х: 14



	~Оператори циклу
Оператори циклу - змінюють нормальне виконання послідовності циклу Java. Коли виконання виходить зі своєї області, всі об'єкти, які були створені автоматично, в цій області будуть знищені.
Java підтримує наступні керуючі оператори циклу.

Оператор		Опис
break			Завершує роботу циклу або оператора switch, і передає виконання наступному, який знаходиться відразу після циклу або оператора switch.
continue		Примушує цикл, пропустити частину його тіла, що залишилася, і відразу перевірити ще раз його стан спочатку.