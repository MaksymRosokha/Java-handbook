		~Вкладені класи
У Java, подібно до методів, змінні класу теж можуть мати в якості свого члена інший клас. У Java допускається написання класу всередині іншого. Клас, написаний усередині, називається Java вкладеним класом , а клас, який містить внутрішній клас, називається зовнішнім класом .

	Синтаксис
Нижче наведено синтаксис для запису вкладеного класу. Тут клас Outer_Demo – це зовнішній клас, а клас Inner_Demo – вкладений клас.

class Outer_Demo {
   class Nested_Demo {
   }
}
Вкладені класи в Java поділяються на два типи
•Нестатичні вкладені класи – нестатичні члени класу.
•Статичні вкладені класи – статичні члени класу.


		~Внутрішні класи (нестатичні вкладені класи)
Внутрішні класи - це механізм безпеки Java. Ми вже знаємо, що клас не може бути пов'язаний з модифікатором доступу private , але якщо у нас є клас як член іншого класу, то внутрішній клас може бути private . І це також використовується для доступу до закритих членів класу.

У Java внутрішні класи мають три типи залежно від того, як і де Ви їх визначаєте:

•внутрішній клас;
•локальний метод внутрішнього класу;
•анонімний внутрішній клас


		~Внутрішні класи
Створити внутрішній клас Java досить просто. Вам просто потрібно написати клас усередині класу. На відміну від класу, внутрішній клас може бути закритим (private), і після того, як Ви оголошує внутрішній клас закритим, він не може бути доступний з об'єкта поза класом.

Нижче наведено приклад створення внутрішнього класу та отримання доступу до нього. У цьому прикладі ми робимо внутрішній клас private і отримуємо доступ до класу за допомогою методу.
	Приклад

class Outer_Demo {
   int num;
   
   //Внутрішній клас
   private class Inner_Demo {
      public void print() {
         System.out.println("Це внутрішній клас");
      }
   }
   
   // Доступ до внутрішнього класу з методу
   void display_Inner() {
      Inner_Demo inner = new Inner_Demo();
      inner.print();
   }
}
   
public class My_class {

   public static void main(String args[]) {
      // Створення зовнішнього класу
      Outer_Demo outer = новий Outer_Demo();
      
      // Доступ до методу display_Inner()
      outer.display_Inner();
   }
}
Тут Ви можете помітити, що Outer_Demo – зовнішній клас, Inner_Demo – внутрішній клас, display_Inner() – метод, у якому ми створюємо внутрішній клас, і цей метод викликається з основного методу.

Якщо Ви скомпілюєте та виконаєте вищезазначену програму, Ви отримаєте наступний результат:

Це внутрішній клас


		~Доступ до приватних (private) членів
Як згадувалося раніше, внутрішні класи також використовують Java для доступу до закритих членів класу. Припустимо, у класу є приватні члени. Для доступу до них напишіть у ньому внутрішній клас, поверніть приватні члени з методу внутрішнього класу, скажімо, методом getValue() і, з іншого класу (з якого Ви хочете отримати доступ до закритих членів) викличте метод getValue() внутрішнього класу .

Щоб створити примірник внутрішнього класу, спочатку необхідно створити примірник зовнішнього класу. Після цього, використовуючи об'єкт зовнішнього класу, можна створити примірник внутрішнього класу.

Outer_Demo outer = новий Outer_Demo();
Outer_Demo.Inner_Demo inner = outer.new Inner_Demo();

Наступний приклад показує, як отримати доступ до закритих членів класу за допомогою внутрішнього класу.
	Приклад
class Outer_Demo {
   // Приватна змінна зовнішнього класу
   private int num = 2018;
   
   //Внутрішній клас
   public class Inner_Demo {
      public int getNum() {
         System.out.println("Це метод getnum внутрішнього класу");
         return num;
      }
   }
}

public class My_class2 {

   public static void main(String args[]) {
      // Створення зовнішнього класу
      Outer_Demo outer = новий Outer_Demo();
      
      // Створення внутрішнього класу
      Outer_Demo.Inner_Demo inner = outer.new Inner_Demo();
      System.out.println(inner.getNum());
   }
}

Якщо Ви скомпілюєте та виконуєте вищезазначену програму, то отримаєте наступний результат:

Це метод getnum внутрішнього класу
2018



		~Локальний метод внутрішнього класу
У Java ми можемо написати клас усередині методу, і це буде локальний тип. Як і локальні змінні можливості внутрішнього класу обмежені у межах методу.

Локальний метод внутрішнього класу може бути створений лише усередині методу, де визначається внутрішній клас. Наступна програма показує, як використовувати локальний внутрішній метод.
	Приклад
public class Outerclass {
   // Метод екземпляра зовнішнього класу
   void my_Method() {
      int num = 888;

      // Локальний метод внутрішнього класу
      class MethodInner_Demo {
         public void print() {
            System.out.println("Це метод внутрішнього класу:" + num);
         }
      } // Кінець внутрішнього класу

      // Доступ до внутрішнього класу
      MethodInner_Demo inner = New MethodInner_Demo();
      inner.print();
   }
   
   public static void main(String args[]) {
      Outerclass outer = new Outerclass();
      outer.my_Method();
   }
}
Отримаємо наступний результат:

Це метод внутрішнього класу: 888


		~Анонімні внутрішні класи в Java
Анонімний внутрішній клас це внутрішній клас, проголошений без імені класу. У разі анонімних внутрішніх класів Java ми оголошуємо і створюємо їх в одну і ту саму годину. Як правило, вони використовують щоразу, коли Вам необхідно перевизначити метод класу чи інтерфейсу. Синтаксис анонімного внутрішнього класу Java виглядає таким чином:

	Синтаксис
AnonymousInner an_inner = новий AnonymousInner() {
   public void my_method() {
      ........
      ........
   }
};
	Приклад
Наступна програма показує, як перевизначити метод класу за допомогою анонімного внутрішнього класу.

abstract class AnonymousInner {
   public abstract void mymethod();
}

public class Outer_class {

   public static void main(String args[]) {
      AnonymousInner inner = new AnonymousInner() {
         public void mymethod() {
            System.out.println("Це приклад анонімного внутрішнього класу");
         }
      };
      inner.mymethod();
   }
}
Отримаємо наступний результат:

Це приклад анонімного внутрішнього класу

Також Ви можете перевизначити методи конкретного класу, а також інтерфейс, використовуючи Java анонімний внутрішній клас.


		~Анонімний внутрішній клас як аргумент
Як правило, якщо метод приймає об'єкт інтерфейсу, абстрактний клас або конкретний клас, ми можемо реалізувати інтерфейс, розширити абстрактний клас і передати об'єкт методу. Якщо це клас, то ми можемо передати його методу.

Але у всіх трьох випадках Ви можете передати Java анонімний внутрішній клас методу. Синтаксис передачі анонімного внутрішнього класу як аргумент методу:

	Синтаксис
obj.my_Method(new My_Class() {
   public void Do() {
      .....
      .....
   }
});
	Приклад
Наступна програма показує, як передати анонімний внутрішній клас як аргумент методу.

// Інтерфейс
interface Message {
   String greet();
}

public class My_class {
   // Метод, який приймає об'єкт інтерфейсу Message
   public void displayMessage(Message m) {
      System.out.println(m.greet() +
         ", це приклад анонімного внутрішнього класу як аргумент");
   }

   public static void main(String args[]) {
      // Створення класу
      My_class obj = New My_class();

      // Передача анонімного внутрішнього класу як аргумент
      obj.displayMessage(new Message() {
         public String greet() {
            return "Привіт";
         }
      });
   }
}

Якщо Ви скомпілюєте та виконаєте вищезазначену програму, то отримаєте наступний результат:

Привіт, це приклад анонімного внутрішнього класу як аргумент



		~Статичний вкладень клас у Java
Статичний внутрішній клас - це вкладення класу, який є статичним членом зовнішнього класу. Доступ до нього можливий без створення примірника зовнішнього класу з використанням інших статичних елементів. Як і статичні члени, статичний вкладений клас не має доступу до змінних екземплярів та методів зовнішнього класу. Синтаксис статичного вкладеного класу Java виглядає так:

	Синтаксис
class MyOuter {
   static class Nested_Demo {
   }
}
	Приклад
Створення примірника статичного вкладеного класу трохи відрізняється від примірника внутрішнього класу. Наступна програма показує, як використовувати статичні вкладені класи.

public class Outer {
   static class Nested_Demo {
      public void my_method() {
         System.out.println("Це мій вкладений клас");
      }
   }
   
   public static void main(String args[]) {
      Outer.Nested_Demo nested = новий Outer.Nested_Demo();
      nested.my_method();
   }
}

Отримаємо наступний результат:

Це мій вкладений клас