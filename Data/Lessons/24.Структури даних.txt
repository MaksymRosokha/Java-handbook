Структури даних Java, надані в пакеті утиліт, дуже потужні і виконують широкий спектр функцій. Ці структури даних складаються з наступного інтерфейсу та класів:
•Enumeration
•BitSet
•Vector
•Stack
•Dictionary
•Hashtable
•Properties
Всі ці класи тепер застаріли, а Java 2 представила нову структуру під назвою Collections Framework, про яку ми поговоримо в наступному уроці.

		~Інтерфейс Enumeration
Інтерфейс Enumeration сам собою не є структурою даних, але дуже важливий у тих інших структур даних. Інтерфейс Enumeration визначає засоби для отримання послідовних елементів із структури даних.

Наприклад, Enumeration визначає метод під назвою nextElement, який використовується для отримання наступного елемента в структурі даних, що містить кілька елементів.


		~Клас BitSet
Клас BitSet реалізує групу бітів або прапорців, які можуть бути встановлені та очищені окремо.

Цей клас дуже корисний у тих випадках, коли вам потрібно йти в ногу із набором логічних значень; ви просто призначаєте біт кожному значенню і встановлюєте чи очищаєте його за необхідності.


		~Клас Vector
Клас Vector схожий на традиційний масив Java, за винятком того, що він може зростати при необхідності для розміщення нових елементів.

Подібно до масиву, доступ до елементів об'єкта Vector можна отримати через індекс у вектор.

Хороша річ у використанні класу Vector полягає в тому, що вам не потрібно турбуватися про налаштування його на конкретний розмір під час створення; він стискається і зростає автоматично, коли це потрібно.


		~Клас Stack
Клас Stack реалізує last-in-first-out (LIFO) стек елементів.

Ви можете думати про стек як про пірамідку: коли ви додаєте новий елемент, він складається поверх інших.

Коли ви дістаєте елемент зі стека, він виходить із вершини. Іншими словами, останній доданий елемент до стека буде першим, що вийшли з нього.


		~Клас Dictionary
Клас Dictionary є абстрактним класом, який визначає структуру даних для зіставлення ключів із значеннями.

Це корисно для випадків, коли ви хочете отримати доступ до даних через конкретний ключ замість цілого індексу.

Так як клас Dictionary абстрактний, він надає лише фреймворк для структури даних із зіставленими ключами, а не конкретної реалізації.


		~Клас Hashtable (хеш-таблиця)
Клас Hashtable надає способи організації даних, виходячи з ключову структуру, визначену користувачем.

Наприклад, у списку адрес хеш-таблиці ви можете розміщувати та сортувати дані з ключем, що ґрунтується на поштовому індексі, а не на ім'я людини.

Конкретне значення ключів у хеш-таблиці повністю залежить від хеш-таблиці та даних, які вона містить.


		~Клас Properties
Properties – це підклас Hashtable. Він використовується для зберігання списків значень, у яких ключ є String, а значення також String.

Клас Properties використовується безліччю інших Java класів. Наприклад, це тип об'єкта, який повертається System.getProperties( ), коли той отримує зовнішні значення.