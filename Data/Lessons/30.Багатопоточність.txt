Java є багатопотоковою мовою програмування, а це означає, що за допомогою неї ми можемо розробляти багатопотокові програми. p align="justify"> Багатопотокова програма складається з двох або більше частин, які можуть виконуватися одночасно, і кожна частина може одночасно обробляти різні завдання, оптимально використовуючи доступні ресурси, особливо якщо комп'ютер має кілька ЦП.

За визначенням, багатозадачність – це спільне використання кількома процесами загальних ресурсів обробки, як-от ЦП. Багатопотоковість розширює ідею багатозадачності на програми, у яких можна розділити певні операції у межах однієї програми окремі потоки. Кожен із потоків може працювати паралельно. ОС розподіляє час обробки як між різними додатками, а й між кожним потоком у додатку.

Багатопотоковість дозволяє створювати код таким чином, щоб кілька дій могли виконуватися одночасно в одній програмі.


		~Життєвий цикл потоку
У своєму життєвому циклі потік проходить різні стадії. Наприклад, потік створюється, запускається, виконується, а потім зупиняється. 
Нижче наведено етапи життєвого циклу:

•Новий − Новий потік починає свій життєвий цикл у стані нового. Він зберігає цей стан доти, доки програма не запустить потік. Його також називають створеним потоком .
•Запущений − Після запуску нового потоку він стає запущеним. Вважається, що потік у цьому стані виконує своє завдання.
•Очікуючий - Іноді потік перетворюється на стан очікування, тобто. потік очікує, доки інший потік виконає завдання. Потік переходить назад у запущений стан тільки після того, як інший потік сигналізує очікуваному потоку продовжити виконання.
•Очікуючий з обмеженням часу − Запущений потік може увійти до стану очікування з обмеженням часу протягом певного інтервалу часу. Потік у цьому стані переходить назад у занедбаний стан, коли закінчується цей часовий інтервал або коли відбувається подія, на яку він очікує.
•Зупинений − Запущений потік перетворюється на зупинений стан, коли він завершує завдання або іншим чином завершується.


		~Пріоритети потоків
Кожен потік Java має пріоритет, що допомагає операційній системі визначати порядок, у якому плануються потоки.

Пріоритети потоків Java знаходяться в діапазоні від MIN_PRIORITY (константа 1) до MAX_PRIORITY (константа 10). За промовчанням кожному потоку встановлюється пріоритет NORM_PRIORITY (константа 5).

Потоки з більш високим пріоритетом важливіші для програми, і в першу чергу їм має виділятися процесорний час. Однак, пріоритети потоків не можуть гарантувати порядок, в якому виконуються потоки, і дуже сильно залежать від платформи.

		~Створення потоку шляхом реалізації інтерфейсу Runnable
Якщо ваш клас призначений для виконання як потік, ви можете досягти цього, реалізувавши інтерфейс Runnable . Вам потрібно буде виконати три основні кроки:

	Крок 1
Як перший крок вам необхідно реалізувати метод run(), що надається інтерфейсом Runnable. Цей метод забезпечує точку входу для потоку, і ви помістите до нього повний код, що реалізує функціональність програми. Нижче наводиться простий синтаксис методу run().

public void run( )

	Крок 2
На другому кроці ви створите екземпляр об'єкта Thread , використовуючи наступний конструктор:

Thread(Runnable threadObj, String threadName);

Де threadObj - це екземпляр класу, який реалізує інтерфейс Runnable , а threadName - це ім'я, дане новому потоку.

	Крок 3
Після створення об'єкта Thread можна запустити його, викликавши метод start(), який виконує виклик методу run(). Нижче наводиться простий синтаксис методу start(). 

void start();

	Приклад
Ось приклад, який створює новий потік і запускає:

class RunnableDemo implements Runnable {
   private Thread t;
   private String threadName;
   
   RunnableDemo( String name) {
      threadName = name;
      System.out.println("Створення" + threadName );
   }
   
   public void run() {
      System.out.println("Виконання" + threadName );
      try {
         for(int i = 4; i > 0; i--) {
            System.out.println("Потік: " + threadName + ", " + i);
            // Нехай потік трохи зачекає.
            Thread.sleep(50);
         }
      } catch (InterruptedException e) {
         System.out.println("Потік" + threadName + "перервано.");
      }
      System.out.println("Потік" + threadName + "закінчується.");
   }
   
   public void start() {
      System.out.println("Запуск" + threadName );
      if (t == null) {
         t = New Thread (this, threadName);
         t.start();
      }
   }
}

public class TestThread {

   public static void main(String args[]) {
      RunnableDemo R1 = New RunnableDemo("Потік-1");
      R1.start();
      
      RunnableDemo R2 = New RunnableDemo(" Потік-2");
      R2.start();
   }
}
Це дасть наступний результат:

Створення Потік-1
Запуск Потік-1
Створення Потік-2
Запуск Потік-2
Виконання Потік-1
Потік: Потік-1, 4
Виконання Потік-2
Потік: Потік-2, 4
Потік: Потік-1, 3
Потік: Потік-2, 3
Потік: Потік-1, 2
Потік: Потік-2, 2
Потік: Потік-1, 1
Потік: Потік-2, 1
Потік Потік-1 завершується.
Потік Потік-2 завершується.


		~Створення потоку шляхом розширення класу Thread
Другий спосіб створення потоку Java полягає у створенні нового класу, що розширює клас Thread за допомогою наступних двох простих кроків. Цей підхід забезпечує більшу гнучкість у обробці кількох потоків, створених з використанням доступних методів у класі Thread.

	Крок 1
Вам потрібно буде перевизначити метод run (), доступний у класі Thread. Цей метод забезпечує точку входу для потоку, і ви помістите до нього повний код, що реалізує функціональність програми. Нижче наводиться простий синтаксис методу run().

public void run( )

	Крок 2
Після створення об'єкта Thread можна запустити його, викликавши метод start() , який виконує виклик методу run(). Нижче наведено простий синтаксис методу start():

void start( );

	Приклад
Ось попередня програма, переписана для розширення потоку:

class ThreadDemo extends Thread {
   private Thread t;
   private String threadName;
   
   ThreadDemo( String name) {
      threadName = name;
      System.out.println("Створення" + threadName );
   }
   
   public void run() {
      System.out.println("Виконання" + threadName );
      try {
         for(int i = 4; i > 0; i--) {
            System.out.println("Потік: " + threadName + ", " + i);
            // Нехай потік трохи зачекає.
            Thread.sleep(50);
         }
      } catch (InterruptedException e) {
         System.out.println("Потік" + threadName + "переривається.");
      }
      System.out.println("Потік" + threadName + "закінчується.");
   }
   
   public void start() {
      System.out.println("Запуск" + threadName );
      if (t == null) {
         t = New Thread (this, threadName);
         t.start();
      }
   }
}

public class TestThread {

   public static void main(String args[]) {
      ThreadDemo T1 = New ThreadDemo("Потік-1");
      T1.start();
      
      ThreadDemo T2 = New ThreadDemo("Потік-2");
      T2.start();
   }
}
Це дасть наступний результат:

Створення Потік-1
Запуск Потік-1
Створення Потік-2
Запуск Потік-2
Виконання Потік-1
Потік: Потік-1, 4
Виконання Потік-2
Потік: Потік-2, 4
Потік: Потік-1, 3
Потік: Потік-2, 3
Потік: Потік-1, 2
Потік: Потік-2, 2
Потік: Потік-1, 1
Потік: Потік-2, 1
Потік Потік-1 завершується.
Потік Потік-2 завершується.


		~Методи потоку
Нижче наведено список важливих методів, доступних у класі Thread Java.

№	Метод та опис

1	public void start()
	Запускає потік окремим шляхом виконання, потім викликає метод run() для цього об'єкта Thread.

2	public void run()
	Якщо цей об'єкт Thread був створений з використанням окремої мети Runnable, метод run() викликається для цього об'єкта Runnable.

3	public final void setName(String name)
	Змінює ім'я об'єкта Thread. Існує також метод getName() для отримання імені.

4	public final void setPriority(int priority)
	Встановлює пріоритет цього об'єкта Thread. Можливе значення від 1 до 10.

5	public final void setDaemon(boolean on)
	Параметр true позначає цей потік як допоміжний потік.

6		public final void join (long millisec)
Поточний потік викликає цей метод у другому потоці, в результаті чого поточний потік блокується до тих пір, поки другий потік не завершиться або не пройде заданий кількість мілісекунд.

7	public void interrupt()
	Перериває цей потік, змушуючи його продовжити виконання, якщо він був заблокований з будь-якої причини.

8	public final boolean isAlive()
	Повертає true, якщо потік активний, тобто будь-коли після запуску потоку, але до його завершення.

Попередні методи викликаються конкретного об'єкта Thread. Наступні методи класу Thread є статичними. Виклик одного із статичних методів виконує операцію у поточному запущеному потоці.

№	Метод та опис

1

public static void yield()
Примушує поточний запущений потік поступитися місцем будь-яким іншим потокам з тим же пріоритетом, які очікують планування.

2	public static void sleep(long millisec)
	Блокує поточний запущений потік принаймні зазначену кількість мілісекунд.

3	public static boolean holdsLock(Object x)
	Повертає true, якщо поточний потік утримує блокування об'єкта.

4	public static Thread currentThread()
	Повертає посилання на поточний запущений потік, який викликає цей метод.

5	public static void dumpStack()
	Виводить відстеження стека для поточного запущеного потоку, що корисно при налагодженні багатопоточної програми.

	Приклад
Наступна програма ThreadClassDemo демонструє деякі з цих методів класу Thread. Розглянемо клас DisplayMessage , який реалізує Runnable:

// Назва файлу: DisplayMessage.java
// Створюємо потік для реалізації Runnable

public class DisplayMessage implements Runnable {
   private String message;
   
   public DisplayMessage(String message) {
      this.message = message;
   }
   
   public void run() {
      while(true) {
         System.out.println(message);
      }
   }
}

Нижче наведено ще один клас, який розширює клас Thread.

// Назва файлу: GuessANumber.java
// Створюємо потік для розширення Thread

public class GuessANumber extends Thread {
   private int number;
   public GuessANumber(int number) {
      this.number = number;
   }
   
   public void run() {
      int counter = 0;
      int guess = 0;
      do {
         guess = (int) (Math.random() * 100 + 1);
         System.out.println(this.getName() + "вгадувань" + guess);
         counter++;
      } while(guess! = number);
      System.out.println("** Правильно!" + this.getName() + "за" + counter + "вгадувань.**");
   }
}

Нижче наведено основну програму, в якій використовуються вище певні класи.

// Назва файлу: ThreadClassDemo.java
public class ThreadClassDemo {

   public static void main(String [] args) {
      Runnable hello = new DisplayMessage("Привіт");
      Thread thread1 = New Thread (hello);
      thread1.setDaemon(true);
      thread1.setName("привіт");
      System.out.println("Запуск потоку привіт...");
      thread1.start();
      
      Runnable bye = new DisplayMessage("Поки що");
      Thread thread2 = New Thread (bye);
      thread2.setPriority(Thread.MIN_PRIORITY);
      thread2.setDaemon(true);
      System.out.println("Запуск потоку поки що...");
      thread2.start();

      System.out.println("Запуск потоку3...");
      Thread thread3 = New GuessANumber(27);
      thread3.start();
      try {
         thread3.join();
      } catch (InterruptedException e) {
         System.out.println("Потік перервано");
      }
      System.out.println("Запуск потоку4...");
      Thread thread4 = New GuessANumber(75);
      
      thread4.start();
      System.out.println("main() завершується...");
   }
}

Це дасть такий результат. Ви можете пробувати цей приклад знову і знову, і щоразу ви будете отримувати різні результати.

Висновок
Запуск потоку привіт...
Запуск потоку поки що...
вітання
вітання
вітання
вітання
вітання
вітання
поки що
поки що
поки що
поки що
поки що
.......