Наслідування - це процес переймання класом властивостей (методів та полів) іншого класу. З використанням Java спадкування інформація стає керованою в ієрархічному порядку.
Клас, який успадковує властивості іншого класу, називається підкласом (похідним класом, спадковим класом), а клас, властивості якого успадковуються, відомий як суперклас (базовий клас, батьківський клас).


		~Ключове слово extends
extends - це кодове слово, яке використовується для успадкування властивостей класу. Погляньмо на синтаксис цього ключового слова.

	Синтаксис
class Super {
   ...
}
class Sub extends Super {
   ...
}
	Приклад коду
Далі наведено приклад процесу успадкування Java. На цьому прикладі можна розглянути два класи з іменами Calculator та My_Calculator.
Використовуючи ключове слово extends Java, My_Calculator переймає методи addition() та subtraction() класу Calculator.
Скопіюйте та вставте цю програму у файлі під ім'ям My_Calculator.java

class Calculator {
   int c;

   public void addition(int a, int b) {
      c = a + b;
      System.out.println("Сума чисел: " + c);
   }

   public void subtraction(int a, int b) {
      c = a – b;
      System.out.println("Різниця чисел: " + c);
   }
}

public class My_Calculator extends Calculator {
   public void multiplication(int a, int b) {
      c = a * b;
      System.out.println("Вироблення чисел: " + c);
   }

   public static void main(String args[]) {
      int a = 10, b = 20;
      My_Calculator cal = new My_Calculator();
      cal.addition(a, b);
      cal.subtraction(a, b);
      cal.multiplication(a, b);
   }
}

Скомпілюйте та виконайте вищенаведений код, як показано нижче.

javac My_Calculator.java
java My_Calculator

Після запуску програми отримаємо наступний результат:

Сума чисел: 30
Різниця чисел: -10
Добуток чисел: 200

У цій програмі, при створенні об'єкта класу My_Calculator копія вмісту суперкласу створюється в ньому. Тому, використовуючи об'єкт підкласу, Ви можете отримати доступ до членів суперкласу.

Посилальна змінна суперкласу може містити об'єкт підкласу, але, використовуючи цю змінну, Ви можете мати доступ тільки до членів суперкласу, тому, щоб мати доступ до членів обох класів, рекомендується завжди створювати змінну до підкласу.

Звертаючись до програми, Ви можете створити екземпляр класу, як у прикладі нижче. Але, використовуючи змінну зв'язку суперкласу, Ви не можете викликати метод multiplication() , який належить підкласу My_Calculator.

Calculator cal = new My_Calculator();
cal.addition(a, b);
cal.subtraction(a, b);
Примітка: підклас успадковує всі члени (поля, методи, вкладені класи) із суперкласу. Java конструктори не є членами, тому вони не успадковуються підкласом, але конструктор суперкласу може бути викликаний з підкласу.

		~Ключове слово super
Ключове слово super схоже на ключове слово this . Нижче наведені випадки, де використовується super Java.

•Для диференціації членів суперкласу від членів підкласу, якщо вони мають однакові імена.
•Для виклику конструктора суперкласу із підкласу.

	Диференціація членів
Якщо клас переймає властивості іншого класу, і члени суперкласу мають ті ж імена, що і в підкласі, для їхнього поділу ми використовуємо ключове слово super, як показано нижче.

super.variable
super.method();
	Приклад коду
Цей розділ містить програму, яка демонструє використання ключового слова super Java.

У запропонованій програмі у вас є два класи з іменами Sub_class і Super_class, які мають метод display() з різними реалізаціями і змінну з іменем num з різними значеннями. Ви можете побачити, що ми використали ключове слово super для диференціації членів суперкласу з підкласу.

Скопіюйте та вставте цю програму у файлі під ім'ям Sub_class.java.

// Інтерфейс
class Super_class {
   int num = 88;

   // Метод display() суперкласу
   public void display() {
      System.out.println("Це метод display() суперкласу");
   }
}

public class Sub_class extends Super_class {
   int num = 77;

   // Метод display() субкласу
   public void display() {
      System.out.println("Це метод display() підкласу");
   }

   public void my_method() {
      // Ініціалізація підкласу
      Sub_class sub = new Sub_class();

      // Викликаємо метод display() підкласу
      sub.display();

      // Викликаємо метод display() суперкласу
      super.display();

      // Виводимо значення змінної num підкласу
      System.out.println("Значення змінної num у підкласі: " + sub.num);

      // Виводимо значення змінної num суперкласу
      System.out.println("Значення змінної num у суперкласі:" + super.num);
   }

   public static void main(String args[]) {
      Sub_class obj = New Sub_class();
      obj.my_method();
   }
}

Скомпілюйте та виконайте вищенаведений код, як показано нижче.

javac Sub_class
java Super

Після запуску програми буде отримано наступний результат:

Це метод display() підкласу
Це метод display() суперкласу
Значення змінної num у підкласі: 77
Значення змінної num у суперкласі: 88

	Виклик конструктора суперкласу
Якщо клас переймає властивості іншого класу, підклас автоматично виходить стандартним конструктором суперкласу. Але якщо ви хочете викликати параметризований конструктор суперкласу, вам потрібно використовувати ключове слово super, як показано нижче.

super(values);

	Приклад коду
У запропонованій програмі демонструється використання Java ключового слова super для виклику параметризованого конструктора. У цій програмі міститься суперклас та підклас, де суперклас містить параметризований конструктор, який набуває рядкового значення, а ми використовуємо ключове слово super для виклику параметризованого конструктора суперкласу.

Скопіюйте та вставте цю програму у файлі під ім'ям Subclass.java

class Superclass {
   int age;

   Superclass(int age) {
      this.age = age;
   }

   public void getAge() {
      System.out.println("Значення змінної age в суперкласі одно:" + age);
   }
}

public class Subclass extends Superclass {
   Subclass(int age) {
      super(age);
   }

   public static void main(String args[]) {
      Subclass s = new Subclass(24);
      s.getAge();
   }
}
Скомпілюйте та виконайте вищенаведений код, як показано нижче.

javac Subclass
java Subclass

Після запуску програми буде видано результат:

Значення змінної age у суперкласі дорівнює: 24


		~Співвідношення IS-A
IS-A - це спосіб сказати "Цей об'єкт є типом цього об'єкта". Давайте подивимося, як ключове слово extends використовується для успадкування.

public class Animal {
}

public class Mammal extends Animal {
}

public class Reptile extends Animal {
}

public class Dog extends Mammal {
}

Тепер, ґрунтуючись на прикладі вище, в об'єктно-орієнтованих термінах, такі твердження вірні

•Animal є суперкласом класу Mammal.
•Animal є суперкласом класу Reptile.
•Mammal та Reptile є підкласами класу Animal.
•Dog одночасно є підкласом класів Mammal та Animal.

Тепер, використовуючи ставлення IS-A, ми можемо сказати так:

•Ссавець — Тварина.
•Рептилія – Тварина.
•Собака – Ссавець.

Таким чином, Dog IS-A теж Animal.
З використанням ключового слова extend підкласи можуть успадковувати всі властивості суперкласу крім його приватних властивостей (private).

Ми можемо переконатися, що Mammal є насправді Animal з використанням оператора екземпляра.

class Animal {
}

class Mammal extends Animal {
}

class Reptile extends Animal {
}

public class Dog extends Mammal {

   public static void main(String args[]) {
      Animal a = new Animal();
      Mammal m = new Mammal();
      Dog d = new Dog();

      System.out.println(m instanceof Animal);
      System.out.println(d instanceof Mammal);
      System.out.println(d instanceof Animal);
   }
}
Ми отримаємо наступний результат:

true
true
true

Оскільки ми маємо гарне розуміння принципу роботи ключового слова extends , давайте розглянемо, як використовується ключове слово implements для отримання відношення IS-A.

Загалом, ключове слово implements Java використовується з класами для переймання властивостей інтерфейсу. Інтерфейси ніколи не можуть бути перейняті класом за допомогою extends .	
	Приклад
public interface Animal {
}

public class Mammal implements Animal {
}

public class Dog extends Mammal {
}


		~Ключове Слово instanceof
Давайте використовує оператор instanceof в Java з метою перевірки, чи є Mammal і Dog насправді Animal.
	Приклад
interface Animal{}
class Mammal implements Animal{}

public class Dog extends Mammal {

   public static void main(String args[]) {
      Mammal m = new Mammal();
      Dog d = new Dog();

      System.out.println(m instanceof Animal);
      System.out.println(d instanceof Mammal);
      System.out.println(d instanceof Animal);
   }
}
Ми отримаємо наступний результат:

true
true
true


		~Відношення HAS-A
Ці відносини в основному ґрунтуються на зверненні. Вони визначають, чи є певний клас HAS-A певним випадком. Цей взаємозв'язок допомагає зменшити дублювання коду, а також баги. Погляньмо на приклад.

public class Vehicle{}
public class Speed{}

public class Van extends Vehicle {
   private Speed sp;
}

Ми бачимо, що клас Van HAS-A (є) Speed. Маючи окремий клас Speed, нам не потрібно вставляти код, що належить Speed ​​до класу Van, що дозволяє нам використовувати клас Speed ​​у кількох додатках.

Особливо об'єктно-орієнтованого програмування, користувачам не потрібно турбуватися про те, який об'єкт виконує поточну роботу. Для досягнення цього клас Van приховує деталі реалізації від користувачів класу Van. Таким чином, користувачі повинні попросити клас Van виконати певну дію, і клас Van або виконає роботу сам по собі, або попросить інший клас виконати дію.