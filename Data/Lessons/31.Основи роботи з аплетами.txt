Аплет – це програма Java, яка запускається у веб-браузері. Аплет може бути повнофункціональним Java-додатком, оскільки має у своєму розпорядженні весь прикладний програмний інтерфейс Java.

Між аплетом та автономним Java-додатком є ​​деякі важливі відмінності, у тому числі такі:
•Аплет це клас Java, що розширює клас java.applet.Applet.
•Метод main() не викликається в аплеті, і клас Applet не визначає main().
•Динамічні мережеві програми призначені для вбудовування HTML-сторінку.
•Якщо користувач переглядає HTML-сторінку, що містить аплет, код аплету завантажується на комп'ютер користувача.
•Для перегляду аплету потрібна віртуальна машина Java. Віртуальна машина Java може бути модулем веб-браузера, що підключається, або окремим середовищем виконання.
•Віртуальна машина Java на пристрої користувача створює екземпляр класу Applet і викликає різні методи протягом життєвого циклу аплету.
•Динамічні мережеві програми мають суворі правила безпеки, які дотримуються веб-браузером. Безпеку аплету часто називають службою безпеки ізольованого програмного середовища, коли аплет порівнюють з дитиною, яка грає в пісочниці з різними правилами, яких необхідно дотримуватися.
•Інші класи, потрібні аплету, можна завантажити в одному файлі архіву Java (JAR).


		~Життєвий цикл аплету
Чотири методи в класі Applet визначають основу для створення будь-якого серйозного аплету:
•init – цей метод призначений для будь-якої ініціалізації, необхідної для вашого аплету. Він викликається після обробки параметрів теги всередині тега аплету.
•start – цей метод автоматично викликається після того, як браузер викликає метод init. Він також викликається щоразу, коли користувач повертається на сторінку, що містить аплет, після переходу на інші сторінки.
•stop — цей метод автоматично викликається, коли користувач залишає сторінку, де знаходиться аплет. Тому його можна викликати повторно в тому самому аплеті.
destroy — цей метод викликається лише за нормальному завершенні роботи браузера. Оскільки аплети призначені для розміщення на сторінці HTML, зазвичай не слід залишати ресурси після того, як користувач залишає сторінку, яка містить аплет.
•paint - викликається відразу після методу start(), а також щоразу, коли аплету необхідно перемалювати свій образ у браузері. Метод paint() фактично успадкований від java.awt.


		~Динамічна мережева програма "Привіт, Світ"
Нижче наведено простий аплет HelloWorldApplet.java.

import java.applet.*;
import java.awt.*;

public class HelloWorldApplet extends Applet {
    public void paint (Graphics g) {
       g.drawString ("Привіт, Світ", 25, 50);
    }
}

Ці оператори імпорту переносять класи в дію нашого класу Applet:
•java.applet.Applet
•java.awt.Graphics

Без цих операторів імпорту компілятор Java не розпізнав би класи Applet і Graphics, куди посилається клас Applet.

		~Клас Applet
Кожен аплет є розширенням класу java.applet.Applet. Базовий клас Applet надає методи, які може викликати похідний клас Applet для отримання інформації та служб з контексту браузера.

До них належать методи, які виконують таке:
•Отримують параметри аплету.
•Отримують мережне розташування файлу HTML, що містить аплет.
•Отримують мережеве розташування каталогу класів аплету.
•Виводять статусне повідомлення у браузері.
•Отримують зображення.
•Отримують аудіокліп.
•Відтворюють аудіокліп.
мЗмінюють розмір аплету.

Крім того, клас Applet надає інтерфейс, за допомогою якого засіб перегляду або браузер отримує інформацію про аплет та керує його виконанням. Глядач може:
•Запросити інформацію про автора, версію та авторські права аплета.
•Запитайте опис параметрів, які розпізнають аплет.
•Ініціалізувати аплет.
•Видалити аплет.
•Запустити виконання аплету.
•Зупинити виконання аплету.

Клас Applet надає реалізацію за замовчуванням для кожного з цих методів. За потреби ці реалізації можуть бути скасовані.

Динамічна мережева програма Hello, World скомпільована в цих умовах. Єдиний метод, що перевизначається, - це метод малювання.


		~Виклик аплету
Динамічна мережна програма може бути викликана шляхом вбудовування директив у HTML-файл і перегляду файлу через програму перегляду аплету або браузер з підтримкою Java.

Тег <applet> є основою для вбудовування аплету у файл HTML. Нижче наведено приклад, що викликає аплет Hello, World.

<html>
    <title>The Hello, World Applet</title>
    <hr>
    <applet code="HelloWorldApplet.class" width="320" height="120">
       Якщо ваш браузер містить Java, з'явиться
       повідомлення "Привіт, Світ".
    </applet>
    <hr>
</html>

Примітка. Ви можете звернутися до HTML-тегу аплету , щоб дізнатися більше про виклик аплету з HTML.

Атрибут коду тега <applet> є обов'язковим. Він визначає клас Applet, що запускається. Ширина та висота також необхідні для вказівки початкового розміру панелі, на якій запускається аплет. Директива аплету має бути закрита тегом </applet>.

Якщо аплет приймає параметри, для параметрів можна передати значення, додавши теги <param> між <applet> та </applet>. Браузер ігнорує текст та інші теги між тегами аплету.

Браузери без підтримки Java не обробляють <applet> та </applet>. Отже, все те, що з'являється між тегами, не пов'язане з аплетом, відображається в браузерах без підтримки Java.

Засіб перегляду або браузер шукає скомпільований код Java у тому місці, де знаходиться документ. Щоб вказати інше, використовуйте атрибут кодової бази тега <applet>, як показано далі:

<applet codebase = "https://amrood.com/applets" code = "HelloWorldApplet.class"
   width = "320" height = "120">

Якщо аплет знаходиться в пакеті, відмінному від стандартного пакета, пакет зберігання повинен бути вказаний в атрибуті коду з використанням символу точки (.) для розділення компонентів пакета/класу. Наприклад:

<applet  = "mypackage.subpackage.TestApplet.class" 
   width = "320" height = "120">


		~Отримання параметрів аплету
У цьому прикладі показано, як змусити аплет реагувати на параметри налаштування, зазначені в документі. Цей аплет відображає візерунок шахівниці чорного і другого кольору.

Другий колір і розмір кожного квадрата можуть бути вказані як параметри аплету в документі.

CheckerApplet отримує параметри в методі init(). Він також може отримувати свої параметри методом paint(). Однак отримання значень і збереження налаштувань один раз при запуску аплету, а не при кожному оновленні, зручніше та ефективно.

Засіб перегляду аплету або браузер викликає метод init() для кожного аплету, який він запускає. Програма перегляду викликає init() один раз, одразу після завантаження аплета. (Applet.init() не виконує жодних функцій.) Перевизначте реалізацію за замовчуванням, щоб вставити код ініціалізації.

Метод Applet.getParameter() вибирає параметр на ім'я параметра (значення параметра завжди є рядком). Якщо значення наведено числовими або іншими небуквенними даними, рядок необхідно проаналізувати.

Нижче наведено скелет програми CheckerApplet.java

import java.applet.*;
import java.awt.*;

public class CheckerApplet extends Applet {
    int squareSize = 50; // ініціалізований розмір за замовчуванням
    public void init() {}
    private void parseSquareSize (String param) {}
    private Color parseColor (String param) {}
    public void paint (Graphics g) {}
}
Ось метод CheckerApplet's init() та приватний метод parseSquareSize():

public void init() {
    String squareSizeParam = getParameter ("розмір квадрата");
    parseSquareSize (squareSizeParam);
   
    String colorParam = getParameter ("колір");
    Color fg = parseColor (colorParam);
   
    setBackground (Color.black);
    setForeground (fg);
}

private void parseSquareSize (String param) {
    if (param == null) return;
    try {
       squareSize = Integer.parseInt (param);
    } catch (Exception e) {
       // Залишимо значення за замовчуванням
    }
}

Динамічна мережна програма викликає parseSquareSize() для аналізу параметра squareSize. parseSquareSize() викликає бібліотечний метод Integer.parseInt(), який аналізує рядок та повертає ціле число. Integer.parseInt() видає виняток щоразу, коли його аргумент неприпустимий.

Отже, parseSquareSize() перехоплює винятки, а не дозволяє аплету зупинятися при неправильному введенні.

Динамічна мережна програма викликає parseColor(), щоб проаналізувати параметр кольору значення кольору. parseColor() виконує серію порівнянь рядків, щоб зіставити значення параметра з ім'ям певного кольору. Вам необхідно реалізувати ці методи, щоб цей аплет працював.


		~Визначення параметрів аплету
Нижче наведено приклад HTML-файлу із вбудованим CheckerApplet. Файл HTML визначає обидва параметри аплету за допомогою тегу <param>.

<html>
    <title>Checkerboard Applet</title>
    <hr>
    <applet code="CheckerApplet.class" width="480" height="320">
       <param name="колір" value="синій">
       <param name="розмір квадрата" value="30">
    </applet>
    <hr>
</html>

Примітка: в іменах параметрів не враховується регістр.


		~Перетворення додатків в аплет
Графічну програму Java (тобто програму, яка використовує графічний інтерфейс користувача і яку можна запускати за допомогою запуску програм Java) легко перетворити на аплет, яку можна вбудувати на веб-сторінку.

Нижче наведено конкретні кроки для перетворення програми в аплет.
•Створіть HTML-сторінку з відповідним тегом для завантаження коду аплету.
•Надайте підклас класу JApplet. Зробіть цей клас загальнодоступним. В іншому випадку аплет не може бути завантажений.
•Виключіть основний метод у програмі. Не створюйте вікно рамки для програми. Ваша програма буде відображатися всередині браузера.
•Перемістіть будь-який код ініціалізації з конструктора рамкового вікна метод ініціалізації аплету. Вам не потрібно створювати об'єкт аплету. Браузер створює його для вас і викликає метод init.
•Видаліть виклик setSize; для аплету розмір задається із зазначенням параметрів ширини та висоти у файлі HTML.
•Видаліть виклик setDefaultCloseOperation. Динамічну мережеву програму не можна закрити; вона завершується, коли браузер закривається.
•Якщо програма викликає setTitle, виключіть виклик методу. Динамічні мережі не можуть мати заголовків. (Ви, звичайно, можете присвоїти заголовок самій веб-сторінці, використовуючи тег заголовка HTML.)
•Не викликайте setVisible(true). Динамічна мережна програма відображається автоматично.


		~Обробка подій
Динамічні мережеві програми успадковують групу методів обробки подій класу Container. Клас Container визначає кілька методів, таких як processKeyEvent і processMouseEvent, для обробки певних типів подій, а потім один універсальний метод, який називається processEvent.

Щоб відреагувати на подію, аплет повинен перевизначити відповідний метод конкретної події.

import java.awt.event.MouseListener;
import java.awt.event.MouseEvent;
import java.applet.Applet;
import java.awt.Graphics;

public class ExampleEventHandling extends Applet implements MouseListener {
   StringBuffer strBuffer;

   public void init() {
      addMouseListener(this);
      strBuffer = новий StringBuffer();
      addItem("ініціалізація аплету");
   }

   public void start() {
      addItem("запуск аплету");
   }

   public void stop() {
      addItem("зупинка аплету");
   }

   public void destroy() {
      addItem("розвантаження аплету");
   }

   addItem(String word) {
      System.out.println(word);
      strBuffer.append(word);
      repaint();
   }

   public void paint(Graphics g) {
      // Намалюйте прямокутник навколо області відображення аплету.
      g.drawRect(0, 0,
      getWidth() - 1,
      getHeight() - 1);

      // Відобразіть рядок усередині прямокутника.
      g.drawString(strBuffer.toString(), 10, 20);
   }

   
   public void mouseEntered(MouseEvent event) {
   }
   public void mouseExited(MouseEvent event) {
   }
   public void mousePressed(MouseEvent event) {
   }
   public void mouseReleased(MouseEvent event) {
   }
   public void mouseClicked(MouseEvent event) {
      addItem("кнопка мишки натиснута!");
   }
}
Тепер давайте назвемо цей аплет наступним чином:

<html>
   <title>Event Handling</title>
   <hr>
   <applet code="ExampleEventHandling.class"
      width = "300" height = "300">
   </applet>
   <hr>
</html>

Спочатку аплет буде відображати «ініціалізацію аплету. запуск аплету». Потім, як тільки ви натиснете всередині прямокутника, також буде відображатись «кнопка миші натиснута».


		~Відображення зображень
Динамічна мережна програма може відображати зображення у форматах GIF, JPEG, BMP та інших форматах. Щоб відобразити зображення в аплеті, ви використовуєте метод drawImage() із класу java.awt.Graphics.

Нижче наведено приклад, що ілюструє всі кроки для відображення зображень.

import java.applet.*;
import java.awt.*;
import java.net.*;

public class ImageDemo extends Applet {
   private Image image;
   private AppletContext context;
   
   public void init() {
      context = this.getAppletContext();
      String imageURL = this.getParameter("зображення");
      if(imageURL == null) {
         imageURL = "java.jpg";
      }
      try {
         URL url = new URL(this.getDocumentBase(), imageURL);
         image = context.getImage(url);
      } catch (MalformedURLException e) {
         e.printStackTrace();
         // Відобразіть у рядку стану браузера
         context.showStatus("Не вдалося завантажити зображення!");
      }
   }
   
   public void paint(Graphics g) {
      context.showStatus("Відображення зображення");
      g.drawImage(image, 0, 0, 200, 84, null);
      g.drawString("www.javalicense.com", 35, 100);
   }
}
Тепер давайте назвемо цей аплет наступним чином:

<html>
   <title>The ImageDemo applet</title>
   <hr>
   <applet code="ImageDemo.class" width="300" height="200">
      <param name="зображення" value="java.jpg">
   </applet>
   <hr>
</html>


		~Відтворення аудіо
Динамічна мережна програма може відтворювати аудіофайл, представлений інтерфейс AudioClip в пакеті java.applet. Інтерфейс AudioClip має три методи, у тому числі:
•public void play() - відтворює аудіокліп один раз із самого початку.
•public void loop() - викликає безперервне відтворення аудіокліпу.
•public void stop() - зупиняє відтворення аудіокліпу.

Щоб отримати об'єкт AudioClip, необхідно викликати метод getAudioClip() класу Applet. Метод getAudioClip() негайно повертається незалежно від того, чи URL-адреса посилається на фактичний аудіофайл. Аудіофайл не завантажується, доки не зроблено спробу відтворити аудіокліп.

Нижче наведено приклад, що ілюструє всі кроки для відтворення звуку.

import java.applet.*;
import java.awt.*;
import java.net.*;

public class AudioDemo extends Applet {
   private AudioClip clip;
   private AppletContext context;
   
   public void init() {
      context = this.getAppletContext();
      String audioURL = this.getParameter("аудіо");
      if(audioURL == null) {
         audioURL = "default.au";
      }
      try {
         URL url = new URL(this.getDocumentBase(), audioURL);
         clip = context.getAudioClip(url);
      } catch (MalformedURLException e) {
         e.printStackTrace();
         context.showStatus("Не вдалося завантажити аудіофайл!");
      }
   }
   
   public void start() {
      if(clip != null) {
         clip.loop();
      }
   }
   
   public void stop() {
      if(clip != null) {
         clip.stop();
      }
   }
}
Тепер давайте назвемо цей аплет наступним чином:

<html>
   <title>The ImageDemo applet</title>
   <hr>
   <applet code="ImageDemo.class" width="0" height="0">
      <param name="аудіо" value="test.wav">
   </applet>
   <hr>
</html>
Ви можете використовувати test.wav на своєму ПК, щоб перевірити наведений вище приклад.