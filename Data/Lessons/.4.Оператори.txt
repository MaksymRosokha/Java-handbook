Java надає багатий набір операторів для керування змінними. Усі оператори Java можна розділити на такі групи:
•арифметичні оператори;
•оператори порівняння;
•побітові оператори;
•логічні оператори;
моператори присвоєння;
•інші оператори.


		~Арифметичні оператори
Арифметичні оператори - використовуються в математичних виразах так само, як вони використовуються в алгебрі. Припустимо, ціла змінна A дорівнює 10, а змінна B дорівнює 20. У наступній таблиці перераховані арифметичні оператори Java:

Оператор 	Опис 								Приклад
+ 	 	Складає значення з обох боків від оператора 			A + B дасть 30
- 	 	Віднімає правий операнд з лівого операнда 			A - B дасть -10
* 	 	Збільшує значення по обидва боки від оператора 			A * B дасть 200
/ 	 	Оператор поділу ділить лівий операнд на правий операнд 		B/A дасть 2
% 	 	Ділить лівий операнд на правий операнд і повертає залишок 	B % A дасть 0
++ 	 	Інкремент - збільшує значення операнда на 1 			B++ дасть 21
-- 	 	Декремент - зменшує значення операнда на 1 			B-- дасть 19
	Приклад
Наступний простий приклад показує програмно-арифметичні оператори. Скопіюйте та вставте наступний java-код у файл test.java, скомпілюйте та запустити цю програму:

public class Test {

  public static void main(String args[]) {
     int a = 10;
     int b = 20;
     int c = 25;
     int d = 25;
     System.out.println("a+b="+(a+b));
     System.out.println("a - b =" + (a - b));
     System.out.println("a * b = " + (a * b));
     System.out.println("b/a="+(b/a));
     System.out.println("b%a="+(b%a));
     System.out.println("c%a="+(c%a));
     System.out.println("a++ = " + (a++));
     System.out.println("b--="+(a--));
     // Перевірте різницю в d++ та ++d
     System.out.println("d++ = "+(d++));
     System.out.println("++d = " + (++d));
  }
}
Це зробить такий результат:

a + b = 30
a - b = -10
a * b = 200
b/a = 2
b % a = 0
c % a = 5
a++ = 10
b-- = 11
d++ = 25
++d = 27


		~Оператори порівняння
Існують наступні оператори порівняння, що підтримуються мовою Java. Припустимо, змінна A дорівнює 10, а змінна B дорівнює 20. У наступній таблиці перераховані реляційні оператори або оператори порівняння Java:

Оператор Опис Приклад
== 	Перевіряє, чи рівні значення ні двох операндів, якщо так, то умова стає істинною (A == B) — не вірні
!= 	Перевіряє, чи рівні чи немає значення двох операндів, якщо значення не рівні, то умова стає істинною (A != B) — значення істинна
> 	Перевіряє, чи значення лівого операнда більше, ніж значення правого операнда, якщо так, то умова стає істинною (A > B) — не вірні
< 	Перевіряє, чи значення лівого операнда менше, ніж значення правого операнда, якщо так, то умова стає істинною (A < B) — значення істинна
>= 	Перевіряє, чи значення лівого операнда більше чи дорівнює значенню правого операнда, якщо так, то умова стає істинним (A >= B) — значення не вірні
<= 	Перевіряє, якщо значення лівого операнда менше або дорівнює значенню правого операнда, якщо так, то умова стає істинною (A <= B) — значення істинна
	Приклад
Наступний простий приклад показує програмні оператори порівняння в Java. Скопіюйте та вставте наступний java-код у файл test.java, скомпілюйте та запустити цю програму:

public class Test {

  public static void main(String args[]) {
     int a = 10;
     int b = 20;
     System.out.println("a == b = " + (a == b) );
     System.out.println("a!=b="+(a!=b));
     System.out.println("a > b = " + (a > b) );
     System.out.println("a<b="+(a<b));
     System.out.println("b >= a = " + (b >= a) );
     System.out.println("b<=a="+(b<=a));
  }
}
Буде отримано наступний результат:

a == b = false
a! = b = true
a > b = false
a < b = true
b >= a = true
b <= a = false


		~Побітові оператори
Java визначає кілька побітових операторів, які можуть бути застосовані для цілих типів: int, long, short, char і byte. У Java побітовий оператор працює над бітами і виконує операцію біт за бітом. Припустимо, якщо a = 60; і b = 13; то в двійковому форматі вони будуть наступні:

a = 0011 1100
b = 0000 1101
-----------------
a&b = 0000 1100
a | b = 0011 1101
a^b = 0011 0001
~a = 1100 0011

Припустимо цілочисленні змінна A дорівнює 60, а змінна B дорівнює 13. У наступній таблиці перераховані побітові оператори Java:

Оператор 		 Опис Приклад
& (побітове та) 	 Бінарний оператор AND копіює біт у результат, якщо він існує в обох операндах. (A & B) дасть 12, який є 0000 1100
| (побітове або) 	 Бінарний оператор OR копіює біт, якщо він існує в будь-якому з операндів. (A | B) дасть 61 який дорівнює 0011 1101
^ (побітове логічне або) Бінарний оператор XOR копіює біт, якщо він встановлений в одному операнді, але не в обох. (A ^ B) дасть 49, яка є 0011 0001
~ (побітове доповнення)  Бінарний оператор доповнення та має ефект «відображення» біт. (~ A) дасть -61, яка є формою доповненням 1100 0011 у двійковому записі
<< (зсув вліво) 	 Бінарний оператор зсуву вліво. Значення лівих операндів переміщається вліво на кількість біт, заданих правим операндом. A << 2 дасть 240, який 1111 0000
>> (зсув праворуч) 	 Бінарний оператор зсуву праворуч. Значення лівих операндів переміщується праворуч на кількість біт, заданих правим операндом, а зсунуті значення заповнюються нулями. A >>> 2 дасть 15, який є 0000 1111
	Приклад
Наступний простий приклад показує, програмно-побітові оператори в Java. Скопіюйте та вставте наступний java-код у файл test.java, скомпілюйте та запустити цю програму:

public class Test {

  public static void main(String args[]) {
     int a = 60; / * 60 = 0011 1100 * /
     int b = 13; / * 13 = 0000 1101 * /
     int c = 0;

     c = a&b; / * 12 = 0000 1100 * /
     System.out.println("a & b = " + c );

     з = a | b; / * 61 = 0011 1101 * /
     System.out.println("a | b = " + c);

     c = a^b; / * 49 = 0011 0001 * /
     System.out.println("a^b="+c);

     c = ~a; / * -61 = 1100 0011 * /
     System.out.println("~a = " + c );

     c = a << 2; / * 240 = 1111 0000 * /
     System.out.println("a << 2 = " + c );

     c = a >> 2; / * 215 = 1111 * /
     System.out.println("a >> 2 = " + c );

     c = a >>> 2; / * 215 = 0000 1111 * /
     System.out.println("a >>> 2 = " + c );
  }
}
Буде отримано наступний результат:

a & b = 12
a | b = 61
a ^ b = 49
~a = -61
a << 2 = 240
a >> 15
a >>> 15
		

		~Логічні оператори
Припустимо, логічна змінна A має значення true, а змінна B зберігає false. У наступній таблиці перераховані логічні оператори Java:

Оператор Опис Приклад
&& 	 Називається логічний оператор «І». Якщо обидва операнда є не рівними нулю, то умова стає істинною (A && B) — значення false
|| 	 Називається логічний оператор «АБО». Якщо кожен із двох операндів не дорівнює нулю, то умова стає істинною (A || B) — значення true
! 	 Називається логічний оператор «НЕ». Використання змінює логічний стан свого операнда. Якщо умова має значення true, то оператор логічного «НЕ» робитиме false !(A && B) — значення true
	Приклад
Наступний простий приклад показує програмно-логічні оператори в Java. Скопіюйте та вставте наступний java-код у файл test.java, скомпілюйте та запустити цю програму:

public class Test {

  public static void main(String args[]) {
     boolean a = true;
     boolean b = false;

     System.out.println("a && b = " + (a&&b));

     System.out.println("a||b="+(a||b));

     System.out.println("!(a && b) = " + !(a && b));
  }
}
Це зробить такий результат:

a && b = false
a || b = true
!(a && b) = true

		~Оператори присвоєння
Існують такі оператори присвоєння, що підтримуються мовою Java:

Оператор Опис Приклад
= 	 Простий оператор присвоювання, присвоює значення з правої сторони операндів до лівого операнда C = A + B, надасть значення A + B в C
+= 	 Оператор присвоювання «Додавання», він надає лівому операнду значення правого C += A, еквівалентно C = C + A
-= 	 Оператор присвоєння «Віднімання», він віднімає з правого операнда лівий операнд C -= A, еквівалентно C = C - A
*= 	 Оператор присвоювання «Умноження», він множить правий операнд на лівий операнд C * = A еквівалентно C = C * A
/= 	 Оператор присвоєння «Поділ», він ділить лівий операнд на правий операнд C /= A еквівалентно C = C / A
%= 	 Оператор присвоєння «Модуль», він приймає модуль за допомогою двох операндів і надає його результат лівому операнду C %= A, еквівалентно C = C % A
<<= 	 Оператор присвоювання «Зрушення вліво» C << = 2, це як C = C << 2
>>= 	 Оператор присвоєння «Зрушення вправо» C >>= 2, це як C = C >> 2
&= 	 Оператор присвоєння побітового "І" ("AND") C &= 2, це як C = C & 2
^= 	 Оператор присвоювання побітового виключає «АБО» («XOR») C ^= 2, це як C = C ^ 2
|= 	 Оператор присвоєння побітового «АБО» («OR») C |= 2, як C = C | 2
	Приклад
Наступний простий приклад показує програмно-логічні оператори в Java. Скопіюйте та вставте наступний java-код у файл test.java, скомпілюйте та запустити цю програму:

public class Test {

  public static void main(String args[]) {
     int a = 10;
     int b = 20;
     int c = 0;

     c = a + b;
     System.out.println("c = a + b = " + c);

     c + = a;
     System.out.println("c += a = " + c );

     c -= a;
     System.out.println("c -= a = " + c);

     c * = a;
     System.out.println("c *= a = " + c );

     a = 10;
     c = 15;
     c / = a;
     System.out.println("c/=a="+c);

     a = 10;
     c = 15;
     c % = a;
     System.out.println("c%=a="+c);

     c <<= 2;
     System.out.println("c <<= 2 = " + c);

     c >>= 2;
     System.out.println("c >>= 2 = " + c );

     c >>= 2;
     System.out.println("c >>= a = " + c );

     c &= a;
     System.out.println("c&=2="+c);
  
     c ^= a;
     System.out.println("c^=a="+c);

     c | = a;
     System.out.println("c |= a = " + c);
  }
}
Буде отримано наступний результат:

c = a + b = 30
c + = a = 40
c -= a = 30
c * = a = 300
c / = a = 1
c % = a = 5
c <<= 2 = 20
c >>= 2 = 5
c >>= 2 = 1
c &= a = 0
c ^= a = 10
c | = a = 10


		~Інші оператори
Є кілька інших операторів, які підтримуються мовою Java.

•Тернарний оператор або умовний оператор (?:)
Тернарний оператор - оператор, який складається з трьох операндів і використовується для оцінки виразів типу boolean. Тернарний оператор Java також відомий як умовний оператор. Цей. Мета тернарного оператора чи умовного оператора у тому, щоб вирішити, яке значення має бути присвоєно змінної. Оператор записується у вигляді:

змінна x = (вираз)? значення if true : значення if false
	Приклад
Нижче наведено приклад:

public class Test {
 
   public static void main(String args[]){
      int a, b;
      a = 10;
      b = (a == 1)? 20: 30;
      System.out.println( "Значення b:" + b);
 
      b = (a == 10)? 20: 30;
      System.out.println( "Значення b:" + b);
   }
}
Буде отримано наступний результат:

Значення b: 30
Значення b: 20

•Оператор instanceof
Оператор instanceof - перевіряє, чи є об'єкт певного типу (типу класу або типу інтерфейсу) і використовується тільки для змінних об'єкта посилання. Оператор stanceof записується у вигляді:

(Змінна об'єкта посилання) instanceof (клас/тип інтерфейсу)
	Приклади
Якщо змінна об'єкта посилання в лівій частині оператора проходить перевірку для класу/типу інтерфейсу з правого боку, результатом буде значення true. Нижче наведено приклад та опис оператора instanceof:

public class Test {
 
   public static void main(String args[]){
      String name = "Олег";
      // Наступне повернеться правильно, оскільки тип String
      boolean result = name instanceof String;
      System.out.println(result);
   }
}
Буде отримано наступний результат:

true
Цей оператор, як і раніше, повертатиме значення true, якщо об'єкт, що порівнюється, є сумісним з типом на право призначення. Нижче наводиться ще один приклад:

class Vehicle {}
 
public class Car extends Vehicle {
   public static void main(String args[]){
      Vehicle a = new Car();
      boolean result = a instanceof Car;
      System.out.println(result);
   }
}
Буде отримано наступний результат:

true


		~Пріоритет операторів у Java
Пріоритет операторів визначає групування термінів у виразі. Це впливає як обчислюється вираз. Деякі оператори мають більший пріоритет, ніж інші; наприклад оператор множення має вищий пріоритет, ніж оператор додавання:
Наприклад, x = 7 + 3 * 2. Тут x надається значення 13, не 20, тому що оператор «*» має більш високий пріоритет, ніж «+», так що спочатку перемножується «3 * 2», а потім додається «7 ».

У таблиці оператори з найвищим пріоритетом розміщуються у верхній частині, і рівень пріоритету знижується до нижньої частини таблиці. У виразі високий пріоритет операторів Java оцінюватиметься зліва направо.

Категорія 			  Оператор 				Асоціативність
Постфікс 			  () []. (крапка) 			Зліва направо
Унарний 			  ++ - -! ~ 				Зправа наліво
Мультиплікативний 		  */% 					Зліва направо
Адитивний 			  + - 					Зліва направо
Зсув 				  >> >>> << 				Зліва направо
Реляційний 			  > >= < <= 				Зліва направо
Рівність 			  == != 				Зліва направо
Побітове "І" ("AND") 		  & 					Зліва направо
Побітове виключення «АБО» («XOR») ^ 					Зліва направо
Побітове «АБО» («OR») 		  | 					Зліва направо
Логічне "І" ("AND") 		  && 					Зліва направо
Логічне «АБО» («OR») 		  || 					Зліва направо
Умовний				  ?: 					Зправа наліво
Привласнення 			  = += -= *= /= %= >>= <<= &= ^= |= 	Зправа наліво
Кома 				  , 					Зліва направо