Java є об'єктно-орієнтованою мовою програмування. Як мова, яка має функцію об'єктно-орієнтування, вона підтримує такі основні поняття:
•поліморфізм;
•успадкування;
•інкапсуляція;
•мабстракція;
•класи;
•об'єкти;
•екземпляр;
•метод;
•розбір.
У цьому уроці ми розглянемо об'єкти і класи Java , їх концепції.

Клас може бути визначений як шаблон (позначений зеленим кольором), який описує поведінку об'єкта, який має стан і поведінка. Він є екземпляром класу. Наприклад: собака може мати стан – колір, ім'я, а також і поведінку – кивати, гавкати, їсти.


		~Об'єкти в Java
Давайте подивимося вглиб, що є об'єктами. Якщо ми розглянемо реальний світ, знайдемо багато предметів навколо нас, автомобілі, собаки, люди, і т.д. Усі вони мають стан та спосіб життя.

Якщо врахувати, собаку, то її стан - ім'я, порода, колір, а спосіб життя - гавкіт, виляння хвостом, біг.

Якщо порівняти програмний об'єкт в Java з предметів із реального світу, вони мають дуже схожі характеристики, вони також є стан і поведінка. Програмний стан зберігають у полях, а поведінка відображається через методи.

Таким чином, у розробці програмного забезпечення, методи працюють на внутрішньому стані об'єкта, а зв'язки з іншими здійснюється за допомогою методів.



		~Класи в Java
Клас, з якого створюються окремі об'єкти, позначений зеленим кольором.

Приклад створення класу в Java наводиться нижче:

public class Dog{
   String breed;
   int age;
   String color;

   void barking(){
   }
   
   void hungry(){
   }
   
   void sleeping(){
   }
}
Клас може містити будь-який з наступних видів змінних:

•Локальні змінні, визначені усередині методів, конструкторів чи блоків. Вони будуть оголошені та ініціалізовані у методі, і будуть знищені, коли метод завершиться.
•Змінні екземпляри є змінними у межах класу, а й зовні будь-якого методу. Вони ініціалізуються під час завантаження. Змінні екземпляри можуть бути доступні з будь-якого методу, конструктора або блоків цього конкретного класу.
•Змінні класи або статичні змінні класу Java оголошуються в класі поза будь-яким методом за допомогою статичного ключового слова.

Java класи можуть мати будь-яку кількість методів для доступу до значення різних видів методів. У наведеному вище прикладі barking(), hungry() і sleeping() є методами.

Далі згадані деякі з важливих тем, які мають бути розглянуті для розуміння значення класів та об'єктів у мові програмування.



		~Конструктор класу
При обговоренні питання класу, однією з найважливіших підтем Java є конструктор. Кожен клас має конструктор. Якщо ми не напишемо його або, наприклад, забудемо, компілятор створить його за промовчанням для цього класу.

Щоразу, коли в Java створюється новий об'єкт , буде викликатися щонайменше один конструктор. Головним правилом є те, що вони повинні мати те ж ім'я, що і клас, який може мати більше одного конструктора.

Приклад конструктора наведено нижче:

public class Puppy{
   public Puppy(){
   }

   public Puppy(String name){
      // Так виглядає конструктор в Java і у нього один параметр, name.
   }
}
Примітка: у наступних розділах ми будемо детальніше обговорювати, якщо у нас буде два різні типи конструкторів.



		~Створення об'єкту
Варіанти як створити об'єкт у класі такі:

•Оголошення : оголошення змінної з ім'ям змінної з типом об'єкта.
•Інстанція : використовується «нове» ключове слово.
•Ініціалізація : «нове» ключове слово супроводжується викликом конструктора. Цей виклик ініціалізує новий об'єкт.
Приклад наводиться нижче:

public class Puppy {

   public Puppy(String name){
      // Це конструктор і має один параметр, name.
      System.out.println("Передається ім'я:" + name );
   }
   public static void main(String [] args) {
      // Створення об'єкта myPuppy.
      Puppy myPuppy = new Puppy ("Багет");
   }
}
Якщо Ви скомпілюєте та запустите вище програму, то вона видасть наступний результат:

Ім'я: Багет



		~Доступ до змінних примірників та методів Java
Змінні та методи доступні через створені об'єкти. Щоб отримати доступ до змінної екземпляра, повний шлях має виглядати так:

/* Спочатку створіть об'єкт */
ObjectReference = новий Constructor();

/* Тепер викличте змінну наступним чином */
ObjectReference.variableName;

/* Тепер Ви можете викликати метод класу */
ObjectReference.MethodName();
	Приклад
Цей приклад пояснює, як отримати доступ до змінних екземплярів та методів класу в Java:

public class Puppy {
   
   int puppyAge;

   public Puppy(String name){
      // Це конструктор і має один параметр, name.
      System.out.println("Передається ім'я:" + name );
   }
   public void setAge (int age) {
       puppyAge = age;
   }

   public int getAge( ){
       System.out.println("Вік щеняти:" + puppyAge);
       return puppyAge;
   }
   public static void main(String [] args) {
      /* Створення об'єкта. */
      Puppy myPuppy = new Puppy ("Багет");

      /* Виклик метод класу, щоб встановити вік щеняти. */
      myPuppy.setAge( 2 );

      /* Виклик іншого методу класу, щоб отримати вік щеняти. */
      myPuppy.getAge( );

      /* Отримання змінної екземпляра класу. */
      System.out.println("Значення змінної:" + myPuppy.puppyAge);
   }
}
Якщо Ви скомпілюєте та запустите вище програму, то вона видасть наступний результат:

Ім'я: Багет
Вік щеняти: 2
Значення змінної: 2


		~Правила оголошення класів, операторів імпорту та пакетів у вихідному файлі
В останній частині цього розділу розглянемо правила декларації вихідного файлу. Ці правила Java мають важливе значення при оголошенні класів, операторів імпорту та операторів пакета у вихідному файлі.

•У вихідному файлі може лише один громадський клас (public class).
•Вихідний файл може мати кілька "непублічних" класів.
•Назва публічного класу має збігатися з ім'ям вихідного файлу, який повинен мати розширення .java наприкінці. Наприклад: ім'я класу public class Employee{} , вихідний файл повинен бути Employee.java .
•Якщо клас визначено всередині пакета, оператор пакет повинен бути першим оператором у вихідному файлі.
•Якщо є оператори імпорту, то вони повинні бути написані між операторами пакета та оголошенням класу. Якщо немає операторів пакета, оператор імпорту повинен бути першим рядком у вихідному файлі.
•Оператори імпорту та пакета будуть однаково виконуватися для всіх класів, які є у вихідному файлі. У Java неможливо оголосити різні оператори імпорту та/або пакета до різних класів у вихідному файлі.

Класи мають кілька рівнів доступу та існують різні типи класів: абстрактні класи (abstract class), кінцеві класи (final class) тощо. Про все це обговоримо в уроці модифікатори доступу .

Крім зазначених вище типів класів, Java також має деякі спеціальні класи, які називаються внутрішні (Inner class) та анонімні класи (Anonymous class).



		~Java пакет (package)
При розробці програм сотні класів та інтерфейсів буде написано, тому категоризації цих класів є обов'язковим, а також це робить життя набагато простіше.



		~Оператори імпорту (import)
Якщо задати повне ім'я, яке включає пакет і ім'я класу, то компілятор може легко знайти вихідний код або класи. У Java імпорт це спосіб встановити правильне місце для компілятора, щоб знайти конкретний клас.

Наприклад, наступний рядок буде просити компілятор завантажити всі класи, доступні в каталозі java_installation/java/io:

import java.io.*;



		~Простий приклад по описаному вище
Для нашого навчання створимо два класи. Це будуть класи Employee та EmployeeTest.

Спочатку відкрийте блокнот і додайте наступний код. Пам'ятайте, що цей клас Employee є відкритим чи публічним класом. Збережіть вихідний файл з ім'ям Employee.java.

Клас Employee має чотири змінних екземпляри name, age, designation та salary. Він має один певний конструктор, який приймає параметр.

import java.io.*;
public class Employee{
   String name;
   int age;
   String designation;
   double salary;

   // Це конструктор класу Employee.
   Public Employee(String name){
      this.name = name;
   }
   // Присвоєння віку працівника змінної age.
   public void empAge (int empAge) {
      age = empAge;
   }
   /* Присвоєння змінної designation. */
   public void empDesignation(String empDesig){
      designation = empDesig;
   }
   /* Присвоєння змінної salary. */
   public void empSalary(double empSalary){
      salary = empSalary;
   }
   /* Виведення докладної інформації. */
   public void printEmployee(){
      System.out.println("Ім'я:"+ name );
      System.out.println("Вік:" + age);
      System.out.println("Найменування:" + designation);
      System.out.println("Заробітна плата:" + salary);
   }
}
Як згадувалося, обробка починається з основного методу. Тому для нас, щоб запустити клас Employee, має бути головний метод та створені об'єкти. Створимо окремий клас цих завдань.

Нижче наводиться клас EmployeeTest, у якому створюються два примірники класу Employee і викликають методи шкірного об'єкта, для присвоєння значень кожної змінної.

Збережіть наступний код у файлі «EmployeeTest.java»:

import java.io.*;
public class EmployeeTest{

   public static void main(String args[]){
      /* Створення двох об'єктів за допомогою конструктора. */
      Employee empOne = new Employee("Олег Олегов");
      Employee empTwo = new Employee("Іван Іванов");

      // Виклик методу кожного створеного об'єкта.
      empOne.empAge(26);
      empOne.empDesignation("Старший інженер-програміст");
      empOne.empSalary(1000);
      empOne.printEmployee();

      empTwo.empAge(21);
      empTwo.empDesignation("Інженер-програміст");
      empTwo.empSalary(500);
      empTwo.printEmployee();
   }
}
Тепер, скомпілювавши обидва класи, запустимо EmployeeTest і отримаємо наступний результат:

C:> javac Employee.java
C:> vi EmployeeTest.java
C:> javac EmployeeTest.java
C:> java EmployeeTest
Ім'я: Олег Олегов
Вік: 26
Найменування: Старший інженер-програміст
Заробітна плата: 1000.0
Ім'я: Іван Іванов
Вік: 21
Найменування: Інженер-програміст
Заробітна плата: 500.0