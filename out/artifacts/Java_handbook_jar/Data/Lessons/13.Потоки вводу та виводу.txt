Пакет java.io містить майже кожен клас, який може знадобитися Вам для здійснення введення та виведення в Java. Всі дані потоки представлені потоком введення та адресою виводу. Потік пакету java.io здійснює підтримку різних даних, таких як примітиви, об'єкти, локалізовані символи і т.д.

		~Потоки
Потоки Java визначаються як послідовність даних. Існує два типи потоків:

InPutStream – потік введення використовується для зчитування даних із джерела.
OutPutStream – потік виведення використовується для запису даних за місцем призначення.
Java надає сильну, але гнучку підтримку щодо введення/виводу, пов'язаних з файлами та мережами, однак у цьому посібнику розглянуті лише базові функції, пов'язані з потоками та введенням/виводом. Розглянемо далі по порядку найпоширеніші приклади.

		~Байтовий потік
Потоки байтів Java використовуються для здійснення введення і виведення 8-бітових байтів. Незважаючи на безліч класів, пов'язаних з потоками байтів, найбільш поширене використання таких класів: FileInputStream та FileOutputStream. Нижче розглянуто приклад, що ілюструє використання даних двох класів для копіювання з одного файлу до іншого.

Примітка за прикладом: щоб скопіювати файл, потрібно створити в папці проекту файл file.txt з будь-яким або порожнім вмістом.
	Приклад

import java.io.*;
public class FileCopy {

    public static void main(String args[]) throws IOException {
       FileInputStream fileIn = null;
       FileOutputStream fileOut = null;

       try {
          fileIn = new FileInputStream("file.txt");
          fileOut = новий FileOutputStream("copied_file.txt");
         
          int a;
// Копіювання вмісту файлу file.txt
          while ((a = fileIn.read()) != -1) {
             fileOut.write(a); // Читання вмісту файлу file.txt та запис у файл copied_file.txt
          }
       }finally {
          if (fileIn! = null) {
             fileIn.close();
          }
          if (fileOut! = null) {
             fileOut.close();
          }
       }
    }
}
Тепер розглянемо файл file.txt з таким вмістом:
Вміст файлу file.txt

Як наступний крок необхідно скомпілювати java-програму і виконати її, що дозволить створити файл copied_file.txt з тим же вмістом, що є в file.txt. Таким чином, розмістимо зазначений код у файлі FileCopy.java і виконаємо таку дію:

$javac FileCopy.java
$java FileCopy



		~Символьні потоки
Потоки байтів Java дозволяють зробити введення і виведення 8-бітних байтів, тоді як потоки символів використовуються для введення і виведення 16-бітного юнікоду. Незважаючи на безліч класів, пов'язаних із потоками символів, найбільш поширене використання таких класів: FileReader та FileWriter. Незважаючи на той факт, що внутрішній FileReader використовує FileInputStream, і FileWriter використовує FileOutputStream, основна відмінність полягає в тому, що FileReader зчитує два байти в конкретний момент часу, в той час як FileWriter робить запис двох байтів за той же час.

Ми можемо переформулювати наведений вище приклад, де два даних класу використовуються для копіювання файлу введення (із символами юнікоду) у файл виведення.

Примітка за прикладом: щоб скопіювати файл, потрібно створити в папці проекту файл file.txt з будь-яким або порожнім вмістом.
	Приклад
import java.io.*;
public class FileCopy {

   public static void main(String args[]) throws IOException {
      FileReader fileIn = null;
      FileWriter fileOut = null;

      try {
         fileIn = new FileReader("file.txt");
         fileOut = new FileWriter("copied_file.txt");
         
         int a;
         while ((a = fileIn.read()) != -1) {
            fileOut.write(a);
         }
      } finally {
         if (fileIn != null) {
            fileIn.close();
         }
         if (fileOut != null) {
            fileOut.close();
         }
      }
   }
}
Тепер розглянемо файл file.txt з таким вмістом:
Вміст файлу file.txt

Як наступний крок необхідно скомпілювати програму і виконати її, що дозволить створити файл copied_file.txt з тим самим вмістом, що є в file.txt. Таким чином, розмістимо зазначений код у файлі FileCopy.java і виконаємо таку дію:

$javac FileCopy.java
$java FileCopy


		~Стандартні потоки
Всі мови програмування забезпечують підтримку стандартного введення/виводу, де програма користувача може зробити введення за допомогою клавіатури та здійснити виведення на екран комп'ютера. Якщо ви знайомі з мовами програмування C або C++, вам повинні бути відомі три стандартні пристрої STDIN, STDOUT і STDERR. Аналогічним чином, Java надає такі три стандартні потоки:

•Стандартне введення – використовується для переведення даних у програму користувача, клавіатура зазвичай використовується як стандартний поток введення, представлений у вигляді System.in.
•Стандартний висновок – робиться для виведення даних, отриманих у програмі користувача, і зазвичай екран комп'ютера використовується як стандартний вивод, представлений у вигляді System.out.
•Стандартна помилка – використовується для виведення даних про помилку, отриману в програмі користувача, найчастіше екран комп'ютера служить стандартним потоком повідомлень про помилки, представленого у вигляді System.err.
Нижче представлена ​​проста програма, яка створює InputStreamReader для читання стандартного потоку введення до введення користувачем "q":
	Приклад
import java.io.*;
public class ReadConsole {

   public static void main(String args[]) throws IOException {
      InputStreamReader inStRe = null;

      try {
         inStRe = new InputStreamReader(System.in);
         System.out.println("Введите символы, символ 'q' для выхода.");
         char a;
         do {
            a = (char) inStRe.read();
            System.out.print(a);
         } while(a != 'q');
      }finally {
         if (inStRe != null) {
            inStRe.close();
         }
      }
   }
}
Розмістимо наведений вище код у файлі ReadConsole.java і спробуємо скомпілювати та виконати його згідно з тим, як це представлено в наступній програмі. Дана програма продовжує читання та виведення одного і того ж символу до натискання 'q':

$javac ReadConsole.java
$java ReadConsole
Введіть символи q для виходу.
proglang.su
proglang.su
q
q