Масиви Java — це структура даних, яка зберігає впорядковані колекції фіксованого розміру елементів потрібного типу. Java масив використовується для зберігання колекції даних, але часто буває корисно думати про масив як про сукупність змінних одного типу.
Замість оголошення окремих змінних, таких як number0, number1, ..., і number99, Ви оголошуєте одну змінну масиву, наприклад, numbers і використовуєте numbers[0], numbers[1], ..., та numbers[99], для відображення окремих змінних.
Даний урок ознайомить Вас як у Java оголосити масив змінних, створити і обробляти масив за допомогою індексованих змінних.



		~Оголошення масиву
Щоб використовувати масив у програмі, необхідно оголосити змінну посилання на масив, і Ви повинні вказати тип масиву, який може посилатися на змінну. Синтаксис для оголошення змінної масиву:

dataType[] arrayRefVar; // Кращий метод.
або
dataType arrayRefVar[]; // Працює, але не є кращим способом.

Примітка: стиль dataType[] arrayRefVar є кращим. Стиль dataType arrayRefVar[] походить з мови C/C++ і був прийнятий Java для C/C++-програмістів.
	Приклад
Наступні фрагменти коду приклади використання цього синтаксису:

double[] myList; // Кращий метод.
або
double myList []; // Працює, але не є кращим способом.



		~Створення масиву
У Java створити масив можна за допомогою оператора new за допомогою наступного синтаксису:

arrayRefVar = новий dataType[arraySize];
Вищезгадане оголошення робить дві речі:
•Створює масив, використовуючи новий dataType[arraySize];
•Посилання на недавно створений масив присвоюється змінною arrayRefVar.

Оголошення змінної, створення та присвоєння змінної посилання масиву можуть бути об'єднані в одному операторі, як показано нижче:

dataType[] arrayRefVar = new dataType[arraySize];
В якості альтернативи масиву Java можна створювати наступним чином:

dataType[] arrayRefVar = {значення0, значення1, ..., значенняk};
Елементи масиву доступні через індекс. Відлік індексів ведеться від 0; тобто вони починають від 0 до arrayRefVar.length-1.
	Приклад
Наступний оператор оголошує масив змінних myList, створює масив із 10 елементів типу double та надає посилання myList:

double[] myList = новий double[10];



		~Робота з масивами
При роботі з елементами масиву часто використовують цикл for або цикл foreach тому, що всі елементи мають однаковий тип і відомий розмір.
	Приклад
Повний приклад, що показує, як створювати, ініціалізувати та обробити масив:

public class TestArray {

   public static void main(String[] args) {
      double[] myList = {1.9, 2.9, 3.4, 3.5};

      // Вивести на екран усі елементи масиву
      for (int i = 0; i < myList.length; i++) {
         System.out.println(myList[i] + " ");
      }
      // Сума елементів масиву
      double total = 0;
      for (int i = 0; i < myList.length; i++) {
         total + = myList [i];
      }
      System.out.println("Сума чисел масиву: "+ total);
      // Знаходження серед елементів масиву найбільшого
      double max = myList [0];
      for (int i = 1; i < myList.length; i++) {
         if (myList[i] > max) max = myList[i];
      }
      System.out.println("Найбільший елемент:" + max);
   }
}
Отримаємо наступний результат:

1.9
2.9
3.4
3.5
Сума чисел масиву: 11.7
Найбільший елемент: 3.5



		~Передача масиву в метод
Також як можна передати значення примітивного типу метод, можна також передати масив метод. Наприклад, наступний метод відображає елементи в int масиві:

public static void printArray(int[] array) {
  for (int i = 0; i < array.length; i++) {
    System.out.print(array[i] + " ");
  }
}
Його можна викликати шляхом передачі масиву. Наприклад, наступний оператор викликає метод printArray для відображення 3, 1, 2, 6, 4 та 2:

printArray(new int[]{3, 1, 2, 6, 4, 2});
Повернення масиву з методу
Метод може повертати масив. Наприклад, метод, показаний нижче, повертає масив, який є реверсування іншого масиву:

public static int[] reverse(int[] list) {
  int[] result = new int[list.length];

  for (int i = 0, j = result.length - 1; i < list.length; i++, j--) {
    result[j] = list[i];
  }
  return result;
}



		~Методи для масиву
Клас java.util.Arrays містить різні статичні методи для пошуку, сортування, порівняння та заповнення елементів масиву. Методи перевантажуються всім примітивних типів.

№	Опис
1	public static int binarySearch(Object[] a, Object key)
Шукає заданий масив об'єктів (byte, int, double і т.д.) для зазначеного значення, використовуючи алгоритм двійкового пошуку. Масив має бути відсортований до виконання цього дзвінка. Це повертає індекс ключа пошуку, якщо він міститься у списку; інакше (-(точка вставки + 1).
2	public static boolean equals(long[] a, long[] a2)
Повертає значення true, якщо два зазначених масивах рівні один одному. Два масиви вважаються рівними, якщо обидва масиви містять однакову кількість елементів, і всі відповідні пари елементів двох масивах рівні. Такий самий метод можна використовувати всіма іншими примітивними типами даних (byte, short, int тощо.).
3	public static void fill(int[] a, int val)
Надає певне значення int кожному елементу зазначеного целочисленного масиву. Такий самий метод можна використовувати всіма іншими примітивними типами даних (byte, short, int тощо.).
4	public static void sort(Object[] a)
Цей метод сортування сортує зазначений масив об'єктів у порядку зростання, відповідно до природного порядку його елементів. Такий самий метод можна використовувати всіма іншими примітивними типами даних (byte, short, int тощо.).



~Приклад 1: створення, оголошення змінних, визначення (виділення пам'яті) та ініціалізація масиву
Як приклад візьмемо тип даних int. Ви можете використовувати будь-який інший тип даних.
public class Test {

   public static void main(String[] args) {
      // Створення масивів myArrayInt1 та myArrayInt2 типу int та оголошення змінних
      int[] myArrayInt1;
      int myArrayInt2[];
        
      // Визначення масиву чи виділення пам'яті
      // Масив myArrayInt3 з 10 елементів з початковим значенням 0 для кожного елемента
      int[] myArrayInt3;
      myArrayInt3 = новий int[10];
      // Масив myArrayInt4 з 20 елементів з початковим значенням 0 для кожного елемента
      int[] myArrayInt4 = new int[20];
        
      //Ініціалізація масиву
      // Масив myArrayInt5 з 5 елементів зі значеннями елементів 1, 3, 8, 10, 4
      int[] myArrayInt5 = {1, 3, 8, 10, 4};
      // Масив myArrayInt6 з 10 елементів з початковим значенням 0 для кожного елемента
      int[] myArrayInt6 = new int[10];
      // Присвоєння другому елементу myArrayInt6 значення 14
      myArrayInt6[2] = 14;
      // Присвоєння п'ятому елементу myArrayInt6 значення 8
      myArrayInt6[5] = 8;
   }
}



~Приклад 2: довжина масиву
Дізнатися розмір масиву Java можна за допомогою методу length(). Цей метод дозволяє визначити розмірність масиву.

public class Test {

   public static void main(String[] args) {
      // Масив myArray1 із 5 елементів типу double.
      double[] myArray1 = {2.4, 3.8, 11.2, 9.8, 1.18};
      // Виведення довжини масиву myArray1 на екран.
      System.out.println("Кількість елементів у масиві myArray1: " + myArray1.length);
      
      // Масив myArray2 із 4 елементів типу String.
      String[] myArray2 = {"Java", "масив", "приклад", "proglang.su"};
      // Виведення розміру масиву myArray2 на екран.
      System.out.println("Кількість елементів у масиві myArray2: " + myArray2.length);
   }
}
Отримаємо наступний результат:

Кількість елементів у масиві myArray1: 5
Кількість елементів у масиві myArray2: 4



~Приклад 3: максимальний елемент масиву
Прості способи для того, щоб знайти максимальне число в Java. Спершу скористаємося методом Math.max().

public class Test {

   public static void main(String[] args) {
      // Знаходження максимального елемента в масиві myArray з чотирьох елементів типу double.
      double[] myArray = {11, 5.8, 11.1, 10.9};
        
      // Змінної max задаємо мінімальне double-значення.
      double max = Double.MIN_VALUE;

      // Перебираємо всі елементи масиву.
      for (int i = 0; i < myArray.length; i++) {
          // Змінної max за допомогою методу Math.max() присвоюємо максимальне значення
          // шляхом вибору найбільшого з двох значень (старого значення max і значення елемента).
          max = Math.max(max, myArray[i]);
      }

      // Виводимо на екран найбільше масиву myArray.
      System.out.println("Максимальний елемент у масиві myArray:" + max);
   }
}
Отримаємо наступний результат:

Максимальний елемент у масиві myArray: 11.1
Ще один приклад знаходження максимального числа у масиві Java. Тут ми не використовуватимемо жодних методів.

public class Test {

   public static void main(String[] args) {
      // Знаходження максимального значення в масиві myArray з 4 елементів типу double.
      double[] myArray = {11, 5.8, 11.1, 10.9};
     
      // Змінною max задаємо значення нульового елемента.
      double max = myArray [0];

      // Перебираємо всі елементи масиву.
      for (int i = 1; i < myArray.length; i++) {
          // Порівнюємо значення змінної max із значеннями елемента масиву.
          // Якщо значення елемента масиву більше значення змінної max,
          // то нове значення змінної max дорівнюватиме значенню цього елемента.
          if (myArray[i] > max) {
              max = myArray[i];
          }
      }

      // Виводимо на екран максимальний елемент масиву myArray.
      System.out.println("Максимальне значення в масиві myArray:" + max);
   }
}
Отримаємо наступний результат:

Максимальне значення у масиві myArray: 11.1



~Приклад 4: мінімальний елемент масиву
Написаний нижче код практично нічим не відрізняється від коду, описаного в прикладі 3. Він точно наоборот, просто тут ми шукаємо мінімальне число в масиві Java. У першому способі скористаємося методом Math.min().

public class Test {

   public static void main(String[] args) {
      // Знаходження мінімального елемента в масиві myArray з 4 елементів типу double.
      double[] myArray = {11, 5.8, 11.1, 10.9};
        
      // Змінною min задаємо максимальне double-значення.
      double min = Double.MAX_VALUE;

      // Перебираємо всі елементи масиву.
      for (int i = 0; i < myArray.length; i++) {
          // Змінної min за допомогою методу Math.min() присвоюємо мінімальне значення
          // шляхом вибору найменшого з двох значень (старого значення min і значення елемента).
          min = Math.min(min, myArray[i]);
      }

      // Виводимо на екран найменше масиву myArray.
      System.out.println("Мінімальний елемент у масиві myArray:" + min);
   }
}
Отримаємо наступний результат:

Мінімальний елемент у масиві myArray: 5.8
Ще один приклад знаходження максимального числа у масиві Java. Тут ми не використовуватимемо жодних методів.

public class Test {

   public static void main(String[] args) {
      // Знаходження мінімального значення в масиві myArray з 4 елементів типу double.
      double[] myArray = {11, 5.8, 11.1, 10.9};
     
      // Змінною min задаємо значення нульового елемента.
      double min = myArray[0];

      // Перебираємо всі елементи масиву.
      for (int i = 1; i < myArray.length; i++) {
          // Порівнюємо значення змінної min із значеннями елемента масиву.
          // Якщо значення елемента масиву менше значення змінної min,
          // то нове значення змінної min дорівнюватиме значенню цього елемента.
          if (myArray[i] < min) {
              min = myArray[i];
          }
      }

      // Виводимо найменший елемент масиву myArray.
      System.out.println("Мінімальне значення в масиві myArray:" + min);
   }
}
Отримаємо наступний результат:

Мінімальне значення у масиві myArray: 5.8



~Приклад 5: сума масиву
У цьому прикладі розглянемо як отримати суму елементів масиву Java.

public class Test {

   public static void main(String[] args) {
      // Знаходження суми елементів у масиві myArray з 5 елементів типу double.
      double[] myList = {2.5, 1.8, 1.3, 6.5, 22.8};
      // Ініціалізуємо змінну total.
      double total = 0;

      // Додаємо до змінної total кожен елемент масиву.
      for (int i = 0; i < myList.length; i++) {
         total + = myList [i];
      }

      // Виведення результату на екран.
      System.out.println("Сума елементів масиву myList: "+ total);
   }
}
Отримаємо наступний результат:

Сума елементів масиву myList: 34.9
А в цьому прикладі використовуємо покращений цикл for, щоб знайти суму масиву.

public class Test {

   public static void main(String[] args) {
      // Отримання суми елементів у масиві myArray із 5 елементів типу double.
      double[] myList = {2.5, 1.8, 1.3, 6.5, 22.8};
      // Ініціалізуємо змінну total.
      double total = 0;

      // Додаємо до змінної total кожен елемент масиву за допомогою покращеного циклу for.
      for(double element : myList) {
         total + = element;
      }

      // Виведення результату на екран.
      System.out.println("Сума масиву myList:" + total);
   }
}
Отримаємо наступний результат:

Сума масиву myList: 34.9