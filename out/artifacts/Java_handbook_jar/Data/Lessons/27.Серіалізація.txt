Java надає механізм, званий серіалізацією об'єктів , в якому об'єкт може бути представлений у вигляді послідовності байтів, яка включає дані про об'єкт, а також інформацію про тип об'єкта і типи даних, що зберігаються в об'єкті.
Після того, як серіалізований об'єкт був записаний у файл, він може бути прочитаний з файлу і десеріалізований, тобто інформацію про тип та байти, які представляють об'єкт та його дані, можна використовувати для відтворення об'єкта в пам'яті.

Найбільше вражає те, що весь процес незалежний від JVM (віртуальної машини Java), тобто об'єкт може бути серіалізований на одній платформі та десеріалізований на зовсім іншій платформі.

Класи ObjectInputStream (потік вхідних даних об'єкта) та ObjectOutputStream (потік вихідних даних об'єкта) - це високорівневі потоки, які містять методи здійснення серіалізації і десеріалізації об'єкта.

Клас ObjectOutputStream містить багато методів запису для здійснення запису різних типів даних, але серед них особливо виділяється один метод:

public final void writeObject(Object x) throws IOException
Вищезгаданий метод здійснює серіалізацію Об'єкта і відправляє його в потік вихідних даних. Аналогічно, клас ObjectInputStream містить наступний метод здійснення десеріалізації об'єкта:

public final Object readObject() throws IOException, ClassNotFoundException
Цим методом витягується наступний Об'єкт із потоку даних та здійснюється його десеріалізація. Повернене значення – це Об'єкт, тому необхідно привести його до відповідного типу даних.

Щоб продемонструвати, як серіалізація працює в Java, я збираюся використовувати клас Employee (співробітник), який обговорювався на початку книги. Припустимо, що ми маємо наступний клас Employee, який впроваджує серіалізований інтерфейс.
	Приклад

public class Employee implements java.io.Serializable {
    public String name;
    public String address;
    public transient int SSN;
    public int number;
   
    public void mailCheck() {
       System.out.println("Надсилання чека на " + name + " " + address);
    }
}

Зверніть увагу, що для успішного виконання серіалізації класу мають бути виконані дві умови:
•Клас повинен реалізовувати інтерфейс java.io.Serializable.
•Усі поля у класі мають бути серіалізованими. Якщо поле не серіалізується, воно має бути позначене як проміжне.

Якщо вам цікаво дізнатися, чи можна виконати серіалізацію стандартного класу Java, перевірте документацію цього класу. Тест простий: якщо клас реалізує java.io.Serializable, то він може бути підданий серіалізації; в іншому випадку – не може.


		~Серіалізація об'єкту
Клас ObjectOutputStream використовується для виконання серіалізації об'єкта. Наступна програма SerializeDemo створює примірник об'єкта Employee та серіалізує його у файл.
Після завершення програми створюється файл з ім'ям employee.ser. Програма не генерує жодних вихідних даних, але вивчає код і намагається визначити, що робить програма.

Примітка: Java при серіалізації об'єкта у файл встановленим архітектурним вимогою Java є присвоєння файлу розширення .ser .
	Приклад

import java.io.*;
public class SerializeDemo {

   public static void main(String [] args) {
      Employee e = New Employee();
      e.name = "Анастасія Крот";
      e.address = "Москва, Росія";
      e.SSN = 11122333;
      e.number = 101;
      
      try {
         FileOutputStream fileOut =
         новий FileOutputStream("/tmp/employee.ser");
         ObjectOutputStream out = New ObjectOutputStream(fileOut);
         out.writeObject(e);
         out.close();
         fileOut.close();
         System.out.printf("Серіалізовані дані зберігаються в /tmp/employee.ser");
      } catch (IOException i) {
         i.printStackTrace();
      }
   }
}



		~Десеріалізація об'єкту
Наступна програма DeserializeDemo виконує Java десеріалізацію об'єкта Employee, створеного у програмі SerializeDemo. Вивчіть програму та спробуйте визначити її виведені дані.
	Приклад
import java.io.*;
public class DeserializeDemo {

   public static void main(String [] args) {
      Employee e=null;
      try {
         FileInputStream fileIn = new FileInputStream("/tmp/employee.ser");
         ObjectInputStream in = new ObjectInputStream(fileIn);
         e = (Employee) in.readObject();
         in.close();
         fileIn.close();
      } catch (IOException i) {
         i.printStackTrace();
         return;
      } catch (ClassNotFoundException c) {
         System.out.println("Клас Employee не знайдений");
         c.printStackTrace();
         return;
      }
      
      System.out.println("Десеріалізований Employee...");
      System.out.println("Ім'я: " + e.name);
      System.out.println("Адреса: " + e.address);
      System.out.println("SSN:" + e.SSN);
      System.out.println("Номер:" + e.number);
   }
}

Це дасть наступний результат:

Десеріалізований Employee...
Ім'я: Анастасія Крот
Адреса: Москва, Росія
SSN: 0
Номер: 101

Наступні важливі моменти, які слід зазначити, наведені нижче:
•Блок спроба-перехоплення намагається перехопити виняток ClassNotFoundException (клас не знайдено виняток), який описується методом readObject() (читання Об'єкта()). Щоб JVM могла провести десеріалізацію об'єкта, вона має знайти байт-код для класу. Якщо JVM не може знайти клас під час десеріалізації об'єкта, вона генерує виключення ClassNotFoundException.
•Зверніть увагу, що значення readObject(), що повертається, наведено до посилання Employee.
•Значення поля SSN було 11122333, коли об'єкт був серіалізований, але оскільки поле є проміжним, це значення не надіслано у поток вихідних даних. Поле SSN десеріалізованого об'єкта Employee дорівнює 0.