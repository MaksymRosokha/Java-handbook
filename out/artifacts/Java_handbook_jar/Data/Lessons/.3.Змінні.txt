Змінна надається нам ім'ям зберігання, щоб нашою програмою можна було маніпулювати. Кожна змінна Java має конкретний тип, який визначає розмір і розміщення їх у пам'яті; діапазон значень, які можуть зберігатися у пам'яті; та набір операцій, які можуть бути застосовані до змінної.
Потрібно оголосити всі змінні, перш ніж їх використовувати. Нижче показано основну форму оголошення:

тип даних змінна [= значення], [змінна [= значення], ...];

Щоб оголосити більш ніж одну змінну вказаного типу, можна використовувати список із комами як роздільники.
Нижче наведено приклади оголошення змінної та ініціалізації в Java:

int a, b, c;         // Оголошення трьох цілих a, b, та c.
int a = 10, b = 10;  // Приклад ініціалізації.
byte b = 22; 	     // Ініціалізація змінної типу b byte.
double pi = 3.14159; // Оголошення та присвоєння величини пі.
char a = 'a'; 	     // Змінної типу char присвоюється значення 'a'.

У цьому уроці розглянемо різні типи змінних, доступних у Java. Існує три типи змінних:

•локальні змінні;
•змінні екземпляри;
•статичні змінні чи змінні класу.

		~Локальні змінні Java
•Локальні змінні оголошуються у методах, конструкторах чи блоках.
•Локальні змінні створюються, коли метод, конструктор чи блок запускається та знищуються після того, як завершиться метод, конструктор чи блок.
•Модифікатори доступу не можна використовувати для локальних змінних.
•Вони є видимими лише у межах оголошеного методу, конструктора чи блока.
•Локальні змінні реалізуються лише на рівні стека всередині.
•У Java немає для локальних змінних значення за промовчанням, так що вони повинні бути оголошені і початкове значення повинні бути надані перед першим використанням.

	Приклад
"age" - локальна змінна, визначається всередині методу "pupAge()" і області її дії обмежується тільки цим методом.

public class Test{
   public void pupAge(){
      int age = 0;
      age = age + 7;
      System.out.println("Вік щеняти:" + age);
   }
   
   public static void main(String args[]){
      Test test = new Test();
      test.pupAge();
   }
}

Буде отримано наступний результат:

Вік щеняти: 7

	Приклад без ініціалізації
Приклад використання age без ініціалізації. Програма випустить помилку під час компіляції.

public class Test{
   public void pupAge(){
      int age;
      age = age + 7;
      System.out.println("Вік щеняти:" + age);
   }
   
   public static void main(String args[]){
      Test test = new Test();
      test.pupAge();
   }
}

Це спричинить таке повідомлення про помилку під час компіляції:

Test.java:4:variable number might not have been initialized
age = age + 7;
         ^
1 error

		~Змінні екземпляри
•Змінні екземпляри оголошуються в класі, але за межами методу, конструктора або якогось блоку.
•Коли для об'єкта в стеку виділяється простір, створюється слот кожного значення змінної екземпляра.
•У Java змінні екземпляра створюються тоді, коли об'єкт створено за допомогою ключового слова "new" і руйнуються тоді, коли об'єкт знищується.
•Змінні містять значення, які мають посилатися більш ніж на один метод, конструктор або блок, або основні частини стану об'єкта, які повинні бути присутніми протягом усього класу.
•Змінні екземпляри можуть бути оголошені на рівні класу, до або після використання.
•Модифікатори доступу можуть бути надані для змінних екземплярів.
•Змінні екземпляри Java є видимими для всіх методів, конструкторів і блоків у класі. Як правило, рекомендується зробити їх private (рівень доступу). Проте можна зробити їх видимими для підкласів цих змінних за допомогою модифікаторів доступу.
•Змінні екземпляри мають значення за замовчуванням. Для чисел за замовчуванням 0, для логічних - false, для посилань на об'єкт - null. Значення можуть бути присвоєні при оголошенні чи конструкторі.
•Змінні екземпляри Java можуть бути доступні безпосередньо шляхом виклику імені змінної всередині класу. Однак у статичних методах та різних класах (коли до змінних примірників дана доступність) повинні бути викликані використовуючи повне ім'я — ObjectReference.VariableName.
	Приклад

import java.io.*;
 
public class Employee{
   // Змінна екземпляра відкрита будь-якого дочірнього класу.
   public String name;
   
   // Змінна salary видно тільки у Employee.
   private double salary;
   
   // Ім'я змінної присвоюється конструкторі.
   Public Employee (String empName) {
      name = empName;
   }
 
   // Змінної salary присвоюється значення.
   public void setSalary(double empSal){
      salary = empSal;
   }
   
   // Цей метод виводить на екран дані співробітників.
   public void printEmp(){
      System.out.println("ім'я: " + name );
      System.out.println("зарплата:" + salary);
   }
 
   public static void main(String args[]){
      Employee empOne = new Employee("Олег");
      empOne.setSalary(1000);
      empOne.printEmp();
   }
}

Програма буде проводити наступний результат:

ім'я: Олег
зарплата: 1000.0

		~Змінні класу або статичні змінні Java
•Змінні класу також відомі в Java як статичні змінні, які оголошуються зі статичним ключовим словом в класі, але за межами методу, конструктора або блоку.
•Там буде лише одна копія кожної статичної змінної у класі, незалежно від того, скільки об'єктів створено з неї.
•Статичні змінні або змінні класу Java використовуються рідко, крім коли оголошуються як константи. Константи - змінні, які оголошені як public/private, final та static. Константи ніколи не змінюються від первісного значення.
•Java статичні змінні створюються при запуску програми і знищуються, коли виконання програми зупиниться.
•Видимість схожа на змінну екземпляру. Однак більшість статичних змінних оголошуються як public, оскільки вони мають бути доступні для користувачів класу.
•Значення за замовчуванням таке саме, як і у змінних екземпляра. Для стандартних чисел дорівнює 0, для даних типу Boolean - false; і для посилань на об'єкт – null. Значення можуть бути присвоєні при оголошенні чи конструкторі. Крім того, вони можуть бути присвоєні у спеціальних блоках статичного ініціалізатора.
•Статичні змінні можуть бути доступні через виклик з іменем класу ClassName.VariableName.
•При оголошенні змінних класу як public, static, final, імена перебувають у верхньому регістрі. Якщо статичні змінні не є такими, синтаксис такий же, як у змінних екземпляра і локальних.
	Приклад

import java.io.*;
 
public class Employee{
   // salary(зарплата) змінна private static
   private static double salary;
 
   // DEPARTMENT (відділ) - це константа
   public static final String DEPARTMENT = "Розробка";
 
   public static void main(String args[]){
      salary = 1000;
      System.out.println(DEPARTMENT+"середня зарплата: "+salary);
   }
}

Це буде робити наступний результат:

Розробка середня зарплатня: 1000

Примітка: Для отримання доступу із зовнішнього класу константи повинні бути доступні як Employee.DEPARTMENT.