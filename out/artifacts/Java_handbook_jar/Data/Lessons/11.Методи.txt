Метод Java - це комплекс виразів, сукупність яких дозволяє виконати певну операцію. Так, наприклад, при викликі методу System.out.println() система виконує ряд команд для виведення повідомлення на консоль.

На даному етапі ви освоїте техніку створення власних методів з або без значень, що повертаються, виклику методів із зазначенням або без вказівки параметрів, і виділення методів при розробці програми.

		~Створення методу
Нижче розглянуто приклад, що ілюструє синтаксис методу, як у Java створити метод.

	Синтаксис
public static int methodName(int a, int b) {
   // тіло
}
Де,
•public static - модифікатор;
•int - тип, що повертається;
•methodName - ім'я методу;
•a, b - формальні параметри;
•int a, int b – перелік параметрів.

Визначення методу представлено заголовком та тілом методу. Те саме ми можемо спостерігати в наступному синтаксисі створення методу.

	Синтаксис
modifier returnType nameOfMethod (Parameter List) {
   // тіло метода
}
Наведений вище синтаксис включає:

•modifier – визначає тип доступу для методу та можливість його використання.
•returnType – метод може повернути значення.
•nameOfMethod – вказує ім'я методу. Сигнатура методу включає ім'я методу та перелік параметрів.
•Parameter List – перелік параметрів представлений типом, порядком та кількістю параметрів методу. Ця опція задається довільно, у методі може бути нульовий параметр.
•method body – тіло методу визначає метод роботи з командами.
	Приклад
Далі представлений вихідний код розглянутого вище методу, що називається max(). Даний метод використовує два параметри num1 і num2 і повертає більший із двох.

/* фрагмент коду повертає мінімальне між двома числами */

public static int minFunction(int n1, int n2) {
   int min;
   if (n1 > n2)
      min = n2;
   else
      min = n1;

   return min; 
}


		~Виклик методу
Перед використанням методу необхідно викликати. Існує два способи виклику методу в Java, тобто. Спосіб здійснює повернення значення або не виробляє (відсутнє повертає значення).

Алгоритм виклику методу досить простий. Коли програма здійснює Java виклик методу, програмне управління передається викликаному методу. Даний викликаний метод потім повертає управління клієнтові, що викликає, у двох випадках, якщо:
•виконується оператор повернення;
•досягнуто закриває фігурна дужка закінчення методу.

Метод повернення типу void здійснює виклик команди. Розглянемо приклад:

System.out.println("Це proglang.su!");
Метод повернення значення може бути проілюстрований таким прикладом:

int result = sum(6, 9);
Приклад нижче демонструє спосіб визначення та виклику методу Java.
	Приклад
public class ExampleMinNumber {
   
   public static void main(String[] args) {
      int a = 11;
      int b = 6;
      int c = minFunction(a, b);
      System.out.println("Мінімальне значення = " + c);
   }

   /* Повертає мінімум із двох чисел */
   public static int minFunction(int n1, int n2) {
      int min;
      if (n1 > n2)
         min = n2;
      else
         min = n1;

      return min; 
   }
}

У результаті буде отримано наступний результат:

Мінімальне значення = 6


		~Ключове слово void
Ключове слово void Java дозволяє нам створити методи, що не роблять повернення значення. У прикладі, наведеному далі, нами було розглянуто метод типу void – methodRankPoints. Методи типу void в Java не здійснюють повернення будь-яких значень. Виклик методу типу void виконується командою, тобто. methodRankPoints(255.7);. Це java-вираз, який закінчується крапкою з комою, як показано в прикладі нижче:
	Приклад
public class ExampleVoid {

   public static void main(String[] args) {
      methodRankPoints(255.7);
   }

   public static void methodRankPoints(double points) {
      if (points >= 202.5) {
         System.out.println("Ранг A1");
      }else if (points >= 122.4) {
         System.out.println("Ранг A2");
      }else {
         System.out.println("Ранг A3");
      }
   }
}
У результаті буде отримано наступний результат:

Ранг A1


		~Передача параметрів за значенням у Java
При виконанні процесу, що викликає, проводиться в Java передача аргументів. Процедура повинна здійснюватися згідно з порядком, передбаченим відповідними параметрами у специфікації методу. Передача параметрів може здійснюватися за значенням або посиланням.

У Java передача параметрів за значенням означає виклик методу з параметром. За рахунок цього здійснюється передача значення аргументу параметру.
	Приклад
Наступна програма показує приклад передачі параметра за значенням. Значення аргументів залишаються незмінними навіть після виклику методу.

public class swappingExample {

   public static void main(String[] args) {
      int a = 30;
      int b = 45;
      System.out.println("Перед тим, як передати, значення аргументів a = " + a + " і b = " + b);

      // Виклик методу передачі
      swapFunction(a, b);
      System.out.println("\nЗараз, до та після передачі значення аргументів ");
      System.out.println("залишилися незмінними, a = " + a + " і b = " + b);
   }

   public static void swapFunction(int a, int b) {
      System.out.println("До заміни: a = " + a + " b = " + b);
      
      // Передача параметрів
      int c = a;
      a = b;
      b = c;
      System.out.println("Після заміни: a = " + a + " b = " + b);
   }
}
Отримаємо наступний результат:

Перед тим як передати значення аргументів a = 30 і b = 45
До заміни: a = 30 b = 45
Після заміни: a = 45 b = 30

Зараз, до та після передачі значення аргументів
залишилися незмінними, a = 30 та b = 45


		~Перевантаження методів
Перевантаження методів Java — випадок, коли у класі є два і більше методу з однаковим ім'ям, але різними параметрами. Цей процес відмінний від перевизначення методів. При перевизначенні методів метод характеризується аналогічним ім'ям, типом, числом параметрів і т.д.

Розглянемо приклад, представлений вище щодо мінімальних чисел целочисленного типу. Припустимо, ми хочемо визначити мінімальне число подвійного типу. В даному випадку буде представлено концепцію навантаження для створення двох і більше методів з однаковим ім'ям, але різними параметрами.

Розглянутий приклад пояснює сказане вище.
	Приклад

public class ExampleOverloading {

   public static void main(String[] args) {
      int a = 7;
      int b = 3;
      double c=5.1;
      double d = 7.2;
      int result1 = minFunction(a, b);
      
      // така сама функція коїться з іншими параметрами
      double result2 = minFunction(c, d);
      System.out.println("Мінімальне значення = " + result1);
      System.out.println("Мінімальне значення = " + result2);
   }

   // для integer
   public static int minFunction(int n1, int n2) {
      int min;
      if (n1 > n2)
         min = n2;
      else
         min = n1;

      return min;
   }
   
   // для double
   public static double minFunction(double n1, double n2) {
     double min;
      if (n1 > n2)
         min = n2;
      else
         min = n1;

      return min;
   }
}
У результаті буде отримано наступний результат:

Мінімальне значення = 3
Мінімальне значення = 5.1

Методи навантаження роблять програму читаної. Таким чином, представлено два методи з однаковим ім'ям, але різними параметрами. Внаслідок чого ми отримали мінімальні int число та число double типу.


		~Конструктор у Java
Java конструктор ініціалізує об'єкт при його створенні. Його ім'я аналогічне імені класу, а синтаксис подібний до синтаксису методу. Однак, на відміну від останнього, в конструкторі відсутнє значення, що повертається.

Як правило, конструктор Java може використовуватися для присвоєння вихідного значення змінних екземпляра, що визначаються класом, або для виконання будь-яких інших процедур запуску, необхідних для створення повністю сформованого об'єкта.

Конструктори присутні у всіх класах, незалежно від їх вказівки, тому що Java автоматично надає конструктор за замовчуванням, який ініціалізує всі змінні членів класу до нуля. Разом з цим, після того, як ви визначите власний конструктор, конструктор за замовчуванням більше не буде задіяний.
	Приклад
У наведеному нижче прикладі розглянуто використання конструктора класу без параметрів.

// Простий конструктор.
class MyClass {
    int x;

    // Далі слідує конструктор
    MyClass() {
       x = 10;
    }
}
Для ініціалізації об'єктів вам необхідно здійснити виклик конструктора згідно з таким прикладом.<\p>

public class ConsDemo {

    public static void main(String args[]) {
       MyClass t1 = New MyClass();
       MyClass t2 = New MyClass();
       System.out.println(t1.x + " " + t2.x);
    }
}
Отримаємо результат:
10 10


		~Параметризований конструктор
Найчастіше вам знадобиться конструктор, який приймає один і більше параметрів. Додавання параметрів до конструктора аналогічно їх додавання до методу, слід лише внести у круглі дужки після імені конструктора.
	Приклад
Далі розглянуто простий приклад використання конструктора із параметром.

// Простий конструктор.
class MyClass {
    int x;
   
    // Нижче конструктор
    MyClass(int i) {
       x = i;
    }
}

З метою ініціалізації об'єктів вам знадобиться викликати конструктор згідно з таким прикладом.

public class ConsDemo {

   public static void main(String args[]) {
      MyClass t1 = new MyClass( 10 );
      MyClass t2 = new MyClass( 20 );
      System.out.println(t1.x + " " + t2.x);
   }
}
Отримаємо наступний результат:
10 20


		~Ключове слово this
Ключове слово this — використовується посилання на поточний клас з урахуванням методу чи конструктора екземпляра. Використовуючи це в Java, Ви можете посилатися на екземпляри класу, такі як конструктори, змінні та методи.

Примітка: ключове слово цього використовується тільки у складі методів або конструкторів екземпляра.

Як правило, ключове слово this в Java використовується для:

•диференціювання між змінними екземпляра та локальними змінними у разі, якщо у них однакові імена, у складі конструктора чи методу.
class Student {
   int age;   
   Student(int age) {
      this.age = age;	
   }
}
•виклику конструктора одного типу (параметризованого конструктора чи конструктора за замовчуванням) з іншого у складі класу. Цей процес також називається явного виклику конструктора.
class Student {
   int age
   Student() {
      this(20);
   }
   
   Student(int age) {
      this.age = age;	
   }
}
	Приклад
Далі наведено приклад, в якому ключове слово this використовується для доступу до екземплярів класу. Необхідно копіювати та вставити цю програму у файл з назвою This_Example.java.

public class This_Example {
   // Ініціалізація змінної num
   int num = 11;

   This_Example() {
      System.out.println("Це приклад програми з ключовим словом this");
   }

   This_Example(int num) {
      // Виклик конструктора за замовчуванням
      this();
      
      // Присвоєння локальної змінної num змінної екземпляра num
      this.num = num;
   }
   
   public void greet() {
      System.out.println("Привіт! Ласкаво просимо в ProgLang!");
   }
      
   public void print() {
      // Локальна змінна num
      int num = 20;
      
      // Виклик методу класу greet
      this.greet();

      // Висновок локальної змінної.
      System.out.println("Значення локальної змінної num:" + num);
      
      // Висновок змінної екземпляра.
      System.out.println("Значення змінної екземпляра num:" + this.num);
   }
   
   public static void main(String[] args) {
      // Ініціалізація класу
      This_Example obj1 = New This_Example();
      
      // Виклик методу print
      obj1.print();

      // Передача нового значення змінної num через параметризований конструктор
      This_Example obj2 = New This_Example(30);
      
      // Виклик знову методу print
      obj2.print();
   }
}
У результаті буде отримано наступний результат:

Це приклад програми з ключовим словом this
Вітання! Ласкаво просимо в ProgLang!
Значення локальної змінної num: 22
Значення змінної екземпляра num: 11
Це приклад програми з ключовим словом this
Вітання! Ласкаво просимо в ProgLang!
Значення локальної змінної num: 22
Значення змінної екземпляра num: 30